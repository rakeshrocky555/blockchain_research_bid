{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file syncing.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\nvar formatters = require('./formatters');\nvar utils = require('../utils/utils');\nvar count = 1;\n\n/**\nAdds the callback and sets up the methods, to iterate over the results.\n\n@method pollSyncing\n@param {Object} self\n*/\nvar pollSyncing = function (self) {\n  var onMessage = function (error, sync) {\n    if (error) {\n      return self.callbacks.forEach(function (callback) {\n        callback(error);\n      });\n    }\n    if (utils.isObject(sync) && sync.startingBlock) sync = formatters.outputSyncingFormatter(sync);\n    self.callbacks.forEach(function (callback) {\n      if (self.lastSyncState !== sync) {\n        // call the callback with true first so the app can stop anything, before receiving the sync data\n        if (!self.lastSyncState && utils.isObject(sync)) callback(null, true);\n\n        // call on the next CPU cycle, so the actions of the sync stop can be processes first\n        setTimeout(function () {\n          callback(null, sync);\n        }, 0);\n        self.lastSyncState = sync;\n      }\n    });\n  };\n  self.requestManager.startPolling({\n    method: 'eth_syncing',\n    params: []\n  }, self.pollId, onMessage, self.stopWatching.bind(self));\n};\nvar IsSyncing = function (requestManager, callback) {\n  this.requestManager = requestManager;\n  this.pollId = 'syncPoll_' + count++;\n  this.callbacks = [];\n  this.addCallback(callback);\n  this.lastSyncState = false;\n  pollSyncing(this);\n  return this;\n};\nIsSyncing.prototype.addCallback = function (callback) {\n  if (callback) this.callbacks.push(callback);\n  return this;\n};\nIsSyncing.prototype.stopWatching = function () {\n  this.requestManager.stopPolling(this.pollId);\n  this.callbacks = [];\n};\nmodule.exports = IsSyncing;","map":{"version":3,"names":["formatters","require","utils","count","pollSyncing","self","onMessage","error","sync","callbacks","forEach","callback","isObject","startingBlock","outputSyncingFormatter","lastSyncState","setTimeout","requestManager","startPolling","method","params","pollId","stopWatching","bind","IsSyncing","addCallback","prototype","push","stopPolling","module","exports"],"sources":["E:/Career/University at Buffalo/Semester 2/CSE_Blockchain/Project/playground/research-papers-bid/node_modules/web3/lib/web3/syncing.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file syncing.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\nvar formatters = require('./formatters');\nvar utils = require('../utils/utils');\n\nvar count = 1;\n\n/**\nAdds the callback and sets up the methods, to iterate over the results.\n\n@method pollSyncing\n@param {Object} self\n*/\nvar pollSyncing = function(self) {\n\n    var onMessage = function (error, sync) {\n        if (error) {\n            return self.callbacks.forEach(function (callback) {\n                callback(error);\n            });\n        }\n\n        if(utils.isObject(sync) && sync.startingBlock)\n            sync = formatters.outputSyncingFormatter(sync);\n\n        self.callbacks.forEach(function (callback) {\n            if (self.lastSyncState !== sync) {\n                \n                // call the callback with true first so the app can stop anything, before receiving the sync data\n                if(!self.lastSyncState && utils.isObject(sync))\n                    callback(null, true);\n                \n                // call on the next CPU cycle, so the actions of the sync stop can be processes first\n                setTimeout(function() {\n                    callback(null, sync);\n                }, 0);\n                \n                self.lastSyncState = sync;\n            }\n        });\n    };\n\n    self.requestManager.startPolling({\n        method: 'eth_syncing',\n        params: [],\n    }, self.pollId, onMessage, self.stopWatching.bind(self));\n\n};\n\nvar IsSyncing = function (requestManager, callback) {\n    this.requestManager = requestManager;\n    this.pollId = 'syncPoll_'+ count++;\n    this.callbacks = [];\n    this.addCallback(callback);\n    this.lastSyncState = false;\n    pollSyncing(this);\n\n    return this;\n};\n\nIsSyncing.prototype.addCallback = function (callback) {\n    if(callback)\n        this.callbacks.push(callback);\n    return this;\n};\n\nIsSyncing.prototype.stopWatching = function () {\n    this.requestManager.stopPolling(this.pollId);\n    this.callbacks = [];\n};\n\nmodule.exports = IsSyncing;\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;AACxC,IAAIC,KAAK,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAErC,IAAIE,KAAK,GAAG,CAAC;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAG,SAAAA,CAASC,IAAI,EAAE;EAE7B,IAAIC,SAAS,GAAG,SAAAA,CAAUC,KAAK,EAAEC,IAAI,EAAE;IACnC,IAAID,KAAK,EAAE;MACP,OAAOF,IAAI,CAACI,SAAS,CAACC,OAAO,CAAC,UAAUC,QAAQ,EAAE;QAC9CA,QAAQ,CAACJ,KAAK,CAAC;MACnB,CAAC,CAAC;IACN;IAEA,IAAGL,KAAK,CAACU,QAAQ,CAACJ,IAAI,CAAC,IAAIA,IAAI,CAACK,aAAa,EACzCL,IAAI,GAAGR,UAAU,CAACc,sBAAsB,CAACN,IAAI,CAAC;IAElDH,IAAI,CAACI,SAAS,CAACC,OAAO,CAAC,UAAUC,QAAQ,EAAE;MACvC,IAAIN,IAAI,CAACU,aAAa,KAAKP,IAAI,EAAE;QAE7B;QACA,IAAG,CAACH,IAAI,CAACU,aAAa,IAAIb,KAAK,CAACU,QAAQ,CAACJ,IAAI,CAAC,EAC1CG,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;;QAExB;QACAK,UAAU,CAAC,YAAW;UAClBL,QAAQ,CAAC,IAAI,EAAEH,IAAI,CAAC;QACxB,CAAC,EAAE,CAAC,CAAC;QAELH,IAAI,CAACU,aAAa,GAAGP,IAAI;MAC7B;IACJ,CAAC,CAAC;EACN,CAAC;EAEDH,IAAI,CAACY,cAAc,CAACC,YAAY,CAAC;IAC7BC,MAAM,EAAE,aAAa;IACrBC,MAAM,EAAE;EACZ,CAAC,EAAEf,IAAI,CAACgB,MAAM,EAAEf,SAAS,EAAED,IAAI,CAACiB,YAAY,CAACC,IAAI,CAAClB,IAAI,CAAC,CAAC;AAE5D,CAAC;AAED,IAAImB,SAAS,GAAG,SAAAA,CAAUP,cAAc,EAAEN,QAAQ,EAAE;EAChD,IAAI,CAACM,cAAc,GAAGA,cAAc;EACpC,IAAI,CAACI,MAAM,GAAG,WAAW,GAAElB,KAAK,EAAE;EAClC,IAAI,CAACM,SAAS,GAAG,EAAE;EACnB,IAAI,CAACgB,WAAW,CAACd,QAAQ,CAAC;EAC1B,IAAI,CAACI,aAAa,GAAG,KAAK;EAC1BX,WAAW,CAAC,IAAI,CAAC;EAEjB,OAAO,IAAI;AACf,CAAC;AAEDoB,SAAS,CAACE,SAAS,CAACD,WAAW,GAAG,UAAUd,QAAQ,EAAE;EAClD,IAAGA,QAAQ,EACP,IAAI,CAACF,SAAS,CAACkB,IAAI,CAAChB,QAAQ,CAAC;EACjC,OAAO,IAAI;AACf,CAAC;AAEDa,SAAS,CAACE,SAAS,CAACJ,YAAY,GAAG,YAAY;EAC3C,IAAI,CAACL,cAAc,CAACW,WAAW,CAAC,IAAI,CAACP,MAAM,CAAC;EAC5C,IAAI,CAACZ,SAAS,GAAG,EAAE;AACvB,CAAC;AAEDoB,MAAM,CAACC,OAAO,GAAGN,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}