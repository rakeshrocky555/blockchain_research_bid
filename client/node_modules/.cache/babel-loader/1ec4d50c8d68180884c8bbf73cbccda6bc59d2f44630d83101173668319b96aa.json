{"ast":null,"code":"/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */\n\n;\n(function (global) {\n  'use strict';\n\n  /*\n    bignumber.js v2.0.7\n    A JavaScript library for arbitrary-precision arithmetic.\n    https://github.com/MikeMcl/bignumber.js\n    Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>\n    MIT Expat Licence\n  */\n  var BigNumber,\n    crypto,\n    parseNumeric,\n    isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n    mathceil = Math.ceil,\n    mathfloor = Math.floor,\n    notBool = ' not a boolean or binary digit',\n    roundingMode = 'rounding mode',\n    tooManyDigits = 'number type has more than 15 significant digits',\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\n    BASE = 1e14,\n    LOG_BASE = 14,\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,\n    // 2^53 - 1\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n    SQRT_BASE = 1e7,\n    /*\n     * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n     * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\n     * exception is thrown (if ERRORS is true).\n     */\n    MAX = 1E9; // 0 to MAX_INT32\n\n  /*\n   * Create and return a BigNumber constructor.\n   */\n  function another(configObj) {\n    var div,\n      // id tracks the caller function, so its name can be included in error messages.\n      id = 0,\n      P = BigNumber.prototype,\n      ONE = new BigNumber(1),\n      /********************************* EDITABLE DEFAULTS **********************************/\n\n      /*\n       * The default values below must be integers within the inclusive ranges stated.\n       * The values can also be changed at run-time using BigNumber.config.\n       */\n\n      // The maximum number of decimal places for operations involving division.\n      DECIMAL_PLACES = 20,\n      // 0 to MAX\n\n      /*\n       * The rounding mode used when rounding to the above decimal places, and when using\n       * toExponential, toFixed, toFormat and toPrecision, and round (default value).\n       * UP         0 Away from zero.\n       * DOWN       1 Towards zero.\n       * CEIL       2 Towards +Infinity.\n       * FLOOR      3 Towards -Infinity.\n       * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n       * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n       * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n       * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n       * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n       */\n      ROUNDING_MODE = 4,\n      // 0 to 8\n\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n      // The exponent value at and beneath which toString returns exponential notation.\n      // Number type: -7\n      TO_EXP_NEG = -7,\n      // 0 to -MAX\n\n      // The exponent value at and above which toString returns exponential notation.\n      // Number type: 21\n      TO_EXP_POS = 21,\n      // 0 to MAX\n\n      // RANGE : [MIN_EXP, MAX_EXP]\n\n      // The minimum exponent value, beneath which underflow to zero occurs.\n      // Number type: -324  (5e-324)\n      MIN_EXP = -1e7,\n      // -1 to -MAX\n\n      // The maximum exponent value, above which overflow to Infinity occurs.\n      // Number type:  308  (1.7976931348623157e+308)\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n      MAX_EXP = 1e7,\n      // 1 to MAX\n\n      // Whether BigNumber Errors are ever thrown.\n      ERRORS = true,\n      // true or false\n\n      // Change to intValidatorNoErrors if ERRORS is false.\n      isValidInt = intValidatorWithErrors,\n      // intValidatorWithErrors/intValidatorNoErrors\n\n      // Whether to use cryptographically-secure random number generation, if available.\n      CRYPTO = false,\n      // true or false\n\n      /*\n       * The modulo mode used when calculating the modulus: a mod n.\n       * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n       * The remainder (r) is calculated as: r = a - n * q.\n       *\n       * UP        0 The remainder is positive if the dividend is negative, else is negative.\n       * DOWN      1 The remainder has the same sign as the dividend.\n       *             This modulo mode is commonly known as 'truncated division' and is\n       *             equivalent to (a % n) in JavaScript.\n       * FLOOR     3 The remainder has the same sign as the divisor (Python %).\n       * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n       * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n       *             The remainder is always positive.\n       *\n       * The truncated division, floored division, Euclidian division and IEEE 754 remainder\n       * modes are commonly used for the modulus operation.\n       * Although the other rounding modes can also be used, they may not give useful results.\n       */\n      MODULO_MODE = 1,\n      // 0 to 9\n\n      // The maximum number of significant digits of the result of the toPower operation.\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\n      POW_PRECISION = 100,\n      // 0 to MAX\n\n      // The format specification used by the BigNumber.prototype.toFormat method.\n      FORMAT = {\n        decimalSeparator: '.',\n        groupSeparator: ',',\n        groupSize: 3,\n        secondaryGroupSize: 0,\n        fractionGroupSeparator: '\\xA0',\n        // non-breaking space\n        fractionGroupSize: 0\n      };\n\n    /******************************************************************************************/\n\n    // CONSTRUCTOR\n\n    /*\n     * The BigNumber constructor and exported function.\n     * Create and return a new instance of a BigNumber object.\n     *\n     * n {number|string|BigNumber} A numeric value.\n     * [b] {number} The base of n. Integer, 2 to 64 inclusive.\n     */\n    function BigNumber(n, b) {\n      var c,\n        e,\n        i,\n        num,\n        len,\n        str,\n        x = this;\n\n      // Enable constructor usage without new.\n      if (!(x instanceof BigNumber)) {\n        // 'BigNumber() constructor call without new: {n}'\n        if (ERRORS) raise(26, 'constructor call without new', n);\n        return new BigNumber(n, b);\n      }\n\n      // 'new BigNumber() base not an integer: {b}'\n      // 'new BigNumber() base out of range: {b}'\n      if (b == null || !isValidInt(b, 2, 64, id, 'base')) {\n        // Duplicate.\n        if (n instanceof BigNumber) {\n          x.s = n.s;\n          x.e = n.e;\n          x.c = (n = n.c) ? n.slice() : n;\n          id = 0;\n          return;\n        }\n        if ((num = typeof n == 'number') && n * 0 == 0) {\n          x.s = 1 / n < 0 ? (n = -n, -1) : 1;\n\n          // Fast path for integers.\n          if (n === ~~n) {\n            for (e = 0, i = n; i >= 10; i /= 10, e++);\n            x.e = e;\n            x.c = [n];\n            id = 0;\n            return;\n          }\n          str = n + '';\n        } else {\n          if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, num);\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n        }\n      } else {\n        b = b | 0;\n        str = n + '';\n\n        // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\n        // Allow exponential notation to be used with base 10 argument.\n        if (b == 10) {\n          x = new BigNumber(n instanceof BigNumber ? n : str);\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n        }\n\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n        // Any number in exponential form will fail due to the [Ee][+-].\n        if ((num = typeof n == 'number') && n * 0 != 0 || !new RegExp('^-?' + (c = '[' + ALPHABET.slice(0, b) + ']+') + '(?:\\\\.' + c + ')?$', b < 37 ? 'i' : '').test(str)) {\n          return parseNumeric(x, str, num, b);\n        }\n        if (num) {\n          x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\n          if (ERRORS && str.replace(/^0\\.0*|\\./, '').length > 15) {\n            // 'new BigNumber() number type has more than 15 significant digits: {n}'\n            raise(id, tooManyDigits, n);\n          }\n\n          // Prevent later check for length on converted number.\n          num = false;\n        } else {\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n        }\n        str = convertBase(str, 10, b, x.s);\n      }\n\n      // Decimal point?\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n      // Exponential form?\n      if ((i = str.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0) e = i;\n        e += +str.slice(i + 1);\n        str = str.substring(0, i);\n      } else if (e < 0) {\n        // Integer.\n        e = str.length;\n      }\n\n      // Determine leading zeros.\n      for (i = 0; str.charCodeAt(i) === 48; i++);\n\n      // Determine trailing zeros.\n      for (len = str.length; str.charCodeAt(--len) === 48;);\n      str = str.slice(i, len + 1);\n      if (str) {\n        len = str.length;\n\n        // Disallow numbers with over 15 significant digits if number type.\n        // 'new BigNumber() number type has more than 15 significant digits: {n}'\n        if (num && ERRORS && len > 15) raise(id, tooManyDigits, x.s * n);\n        e = e - i - 1;\n\n        // Overflow?\n        if (e > MAX_EXP) {\n          // Infinity.\n          x.c = x.e = null;\n\n          // Underflow?\n        } else if (e < MIN_EXP) {\n          // Zero.\n          x.c = [x.e = 0];\n        } else {\n          x.e = e;\n          x.c = [];\n\n          // Transform base\n\n          // e is the base 10 exponent.\n          // i is where to slice str to get the first element of the coefficient array.\n          i = (e + 1) % LOG_BASE;\n          if (e < 0) i += LOG_BASE;\n          if (i < len) {\n            if (i) x.c.push(+str.slice(0, i));\n            for (len -= LOG_BASE; i < len;) {\n              x.c.push(+str.slice(i, i += LOG_BASE));\n            }\n            str = str.slice(i);\n            i = LOG_BASE - str.length;\n          } else {\n            i -= len;\n          }\n          for (; i--; str += '0');\n          x.c.push(+str);\n        }\n      } else {\n        // Zero.\n        x.c = [x.e = 0];\n      }\n      id = 0;\n    }\n\n    // CONSTRUCTOR PROPERTIES\n\n    BigNumber.another = another;\n    BigNumber.ROUND_UP = 0;\n    BigNumber.ROUND_DOWN = 1;\n    BigNumber.ROUND_CEIL = 2;\n    BigNumber.ROUND_FLOOR = 3;\n    BigNumber.ROUND_HALF_UP = 4;\n    BigNumber.ROUND_HALF_DOWN = 5;\n    BigNumber.ROUND_HALF_EVEN = 6;\n    BigNumber.ROUND_HALF_CEIL = 7;\n    BigNumber.ROUND_HALF_FLOOR = 8;\n    BigNumber.EUCLID = 9;\n\n    /*\n     * Configure infrequently-changing library-wide settings.\n     *\n     * Accept an object or an argument list, with one or many of the following properties or\n     * parameters respectively:\n     *\n     *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\n     *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\n     *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\n     *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\n     *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\n     *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\n     *   ERRORS          {boolean|number}   true, false, 1 or 0\n     *   CRYPTO          {boolean|number}   true, false, 1 or 0\n     *   MODULO_MODE     {number}           0 to 9 inclusive\n     *   POW_PRECISION   {number}           0 to MAX inclusive\n     *   FORMAT          {object}           See BigNumber.prototype.toFormat\n     *      decimalSeparator       {string}\n     *      groupSeparator         {string}\n     *      groupSize              {number}\n     *      secondaryGroupSize     {number}\n     *      fractionGroupSeparator {string}\n     *      fractionGroupSize      {number}\n     *\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\n     *\n     * E.g.\n     * BigNumber.config(20, 4) is equivalent to\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\n     *\n     * Ignore properties/parameters set to null or undefined.\n     * Return an object with the properties current values.\n     */\n    BigNumber.config = function () {\n      var v,\n        p,\n        i = 0,\n        r = {},\n        a = arguments,\n        o = a[0],\n        has = o && typeof o == 'object' ? function () {\n          if (o.hasOwnProperty(p)) return (v = o[p]) != null;\n        } : function () {\n          if (a.length > i) return (v = a[i++]) != null;\n        };\n\n      // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n      // 'config() DECIMAL_PLACES not an integer: {v}'\n      // 'config() DECIMAL_PLACES out of range: {v}'\n      if (has(p = 'DECIMAL_PLACES') && isValidInt(v, 0, MAX, 2, p)) {\n        DECIMAL_PLACES = v | 0;\n      }\n      r[p] = DECIMAL_PLACES;\n\n      // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n      // 'config() ROUNDING_MODE not an integer: {v}'\n      // 'config() ROUNDING_MODE out of range: {v}'\n      if (has(p = 'ROUNDING_MODE') && isValidInt(v, 0, 8, 2, p)) {\n        ROUNDING_MODE = v | 0;\n      }\n      r[p] = ROUNDING_MODE;\n\n      // EXPONENTIAL_AT {number|number[]}\n      // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n      // 'config() EXPONENTIAL_AT not an integer: {v}'\n      // 'config() EXPONENTIAL_AT out of range: {v}'\n      if (has(p = 'EXPONENTIAL_AT')) {\n        if (isArray(v)) {\n          if (isValidInt(v[0], -MAX, 0, 2, p) && isValidInt(v[1], 0, MAX, 2, p)) {\n            TO_EXP_NEG = v[0] | 0;\n            TO_EXP_POS = v[1] | 0;\n          }\n        } else if (isValidInt(v, -MAX, MAX, 2, p)) {\n          TO_EXP_NEG = -(TO_EXP_POS = (v < 0 ? -v : v) | 0);\n        }\n      }\n      r[p] = [TO_EXP_NEG, TO_EXP_POS];\n\n      // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n      // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n      // 'config() RANGE not an integer: {v}'\n      // 'config() RANGE cannot be zero: {v}'\n      // 'config() RANGE out of range: {v}'\n      if (has(p = 'RANGE')) {\n        if (isArray(v)) {\n          if (isValidInt(v[0], -MAX, -1, 2, p) && isValidInt(v[1], 1, MAX, 2, p)) {\n            MIN_EXP = v[0] | 0;\n            MAX_EXP = v[1] | 0;\n          }\n        } else if (isValidInt(v, -MAX, MAX, 2, p)) {\n          if (v | 0) MIN_EXP = -(MAX_EXP = (v < 0 ? -v : v) | 0);else if (ERRORS) raise(2, p + ' cannot be zero', v);\n        }\n      }\n      r[p] = [MIN_EXP, MAX_EXP];\n\n      // ERRORS {boolean|number} true, false, 1 or 0.\n      // 'config() ERRORS not a boolean or binary digit: {v}'\n      if (has(p = 'ERRORS')) {\n        if (v === !!v || v === 1 || v === 0) {\n          id = 0;\n          isValidInt = (ERRORS = !!v) ? intValidatorWithErrors : intValidatorNoErrors;\n        } else if (ERRORS) {\n          raise(2, p + notBool, v);\n        }\n      }\n      r[p] = ERRORS;\n\n      // CRYPTO {boolean|number} true, false, 1 or 0.\n      // 'config() CRYPTO not a boolean or binary digit: {v}'\n      // 'config() crypto unavailable: {crypto}'\n      if (has(p = 'CRYPTO')) {\n        if (v === !!v || v === 1 || v === 0) {\n          CRYPTO = !!(v && crypto && typeof crypto == 'object');\n          if (v && !CRYPTO && ERRORS) raise(2, 'crypto unavailable', crypto);\n        } else if (ERRORS) {\n          raise(2, p + notBool, v);\n        }\n      }\n      r[p] = CRYPTO;\n\n      // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n      // 'config() MODULO_MODE not an integer: {v}'\n      // 'config() MODULO_MODE out of range: {v}'\n      if (has(p = 'MODULO_MODE') && isValidInt(v, 0, 9, 2, p)) {\n        MODULO_MODE = v | 0;\n      }\n      r[p] = MODULO_MODE;\n\n      // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n      // 'config() POW_PRECISION not an integer: {v}'\n      // 'config() POW_PRECISION out of range: {v}'\n      if (has(p = 'POW_PRECISION') && isValidInt(v, 0, MAX, 2, p)) {\n        POW_PRECISION = v | 0;\n      }\n      r[p] = POW_PRECISION;\n\n      // FORMAT {object}\n      // 'config() FORMAT not an object: {v}'\n      if (has(p = 'FORMAT')) {\n        if (typeof v == 'object') {\n          FORMAT = v;\n        } else if (ERRORS) {\n          raise(2, p + ' not an object', v);\n        }\n      }\n      r[p] = FORMAT;\n      return r;\n    };\n\n    /*\n     * Return a new BigNumber whose value is the maximum of the arguments.\n     *\n     * arguments {number|string|BigNumber}\n     */\n    BigNumber.max = function () {\n      return maxOrMin(arguments, P.lt);\n    };\n\n    /*\n     * Return a new BigNumber whose value is the minimum of the arguments.\n     *\n     * arguments {number|string|BigNumber}\n     */\n    BigNumber.min = function () {\n      return maxOrMin(arguments, P.gt);\n    };\n\n    /*\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\n     * zeros are produced).\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n     *\n     * 'random() decimal places not an integer: {dp}'\n     * 'random() decimal places out of range: {dp}'\n     * 'random() crypto unavailable: {crypto}'\n     */\n    BigNumber.random = function () {\n      var pow2_53 = 0x20000000000000;\n\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n      // Check if Math.random() produces more than 32 bits of randomness.\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n      var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n        return mathfloor(Math.random() * pow2_53);\n      } : function () {\n        return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n      };\n      return function (dp) {\n        var a,\n          b,\n          e,\n          k,\n          v,\n          i = 0,\n          c = [],\n          rand = new BigNumber(ONE);\n        dp = dp == null || !isValidInt(dp, 0, MAX, 14) ? DECIMAL_PLACES : dp | 0;\n        k = mathceil(dp / LOG_BASE);\n        if (CRYPTO) {\n          // Browsers supporting crypto.getRandomValues.\n          if (crypto && crypto.getRandomValues) {\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\n            for (; i < k;) {\n              // 53 bits:\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n              //                                     11111 11111111 11111111\n              // 0x20000 is 2^21.\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n              // Rejection sampling:\n              // 0 <= v < 9007199254740992\n              // Probability that v >= 9e15, is\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n              if (v >= 9e15) {\n                b = crypto.getRandomValues(new Uint32Array(2));\n                a[i] = b[0];\n                a[i + 1] = b[1];\n              } else {\n                // 0 <= v <= 8999999999999999\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 2;\n              }\n            }\n            i = k / 2;\n\n            // Node.js supporting crypto.randomBytes.\n          } else if (crypto && crypto.randomBytes) {\n            // buffer\n            a = crypto.randomBytes(k *= 7);\n            for (; i < k;) {\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n              // 0 <= v < 9007199254740992\n              v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n              if (v >= 9e15) {\n                crypto.randomBytes(7).copy(a, i);\n              } else {\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 7;\n              }\n            }\n            i = k / 7;\n          } else if (ERRORS) {\n            raise(14, 'crypto unavailable', crypto);\n          }\n        }\n\n        // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.\n        if (!i) {\n          for (; i < k;) {\n            v = random53bitInt();\n            if (v < 9e15) c[i++] = v % 1e14;\n          }\n        }\n        k = c[--i];\n        dp %= LOG_BASE;\n\n        // Convert trailing digits to zeros according to dp.\n        if (k && dp) {\n          v = POWS_TEN[LOG_BASE - dp];\n          c[i] = mathfloor(k / v) * v;\n        }\n\n        // Remove trailing elements which are zero.\n        for (; c[i] === 0; c.pop(), i--);\n\n        // Zero?\n        if (i < 0) {\n          c = [e = 0];\n        } else {\n          // Remove leading elements which are zero and adjust exponent accordingly.\n          for (e = -1; c[0] === 0; c.shift(), e -= LOG_BASE);\n\n          // Count the digits of the first element of c to determine leading zeros, and...\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n          // adjust the exponent accordingly.\n          if (i < LOG_BASE) e -= LOG_BASE - i;\n        }\n        rand.e = e;\n        rand.c = c;\n        return rand;\n      };\n    }();\n\n    // PRIVATE FUNCTIONS\n\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\n    function convertBase(str, baseOut, baseIn, sign) {\n      var d,\n        e,\n        k,\n        r,\n        x,\n        xc,\n        y,\n        i = str.indexOf('.'),\n        dp = DECIMAL_PLACES,\n        rm = ROUNDING_MODE;\n      if (baseIn < 37) str = str.toLowerCase();\n\n      // Non-integer.\n      if (i >= 0) {\n        k = POW_PRECISION;\n\n        // Unlimited precision.\n        POW_PRECISION = 0;\n        str = str.replace('.', '');\n        y = new BigNumber(baseIn);\n        x = y.pow(str.length - i);\n        POW_PRECISION = k;\n\n        // Convert str as if an integer, then restore the fraction part by dividing the\n        // result by its base raised to a power.\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e), 10, baseOut);\n        y.e = y.c.length;\n      }\n\n      // Convert the number as integer.\n      xc = toBaseOut(str, baseIn, baseOut);\n      e = k = xc.length;\n\n      // Remove trailing zeros.\n      for (; xc[--k] == 0; xc.pop());\n      if (!xc[0]) return '0';\n      if (i < 0) {\n        --e;\n      } else {\n        x.c = xc;\n        x.e = e;\n\n        // sign is needed for correct rounding.\n        x.s = sign;\n        x = div(x, y, dp, rm, baseOut);\n        xc = x.c;\n        r = x.r;\n        e = x.e;\n      }\n      d = e + dp + 1;\n\n      // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\n      i = xc[d];\n      k = baseOut / 2;\n      r = r || d < 0 || xc[d + 1] != null;\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));\n      if (d < 1 || !xc[0]) {\n        // 1^-dp or 0.\n        str = r ? toFixedPoint('1', -dp) : '0';\n      } else {\n        xc.length = d;\n        if (r) {\n          // Rounding up may mean the previous digit has to be rounded up and so on.\n          for (--baseOut; ++xc[--d] > baseOut;) {\n            xc[d] = 0;\n            if (!d) {\n              ++e;\n              xc.unshift(1);\n            }\n          }\n        }\n\n        // Determine trailing zeros.\n        for (k = xc.length; !xc[--k];);\n\n        // E.g. [4, 11, 15] becomes 4bf.\n        for (i = 0, str = ''; i <= k; str += ALPHABET.charAt(xc[i++]));\n        str = toFixedPoint(str, e);\n      }\n\n      // The caller will add the sign.\n      return str;\n    }\n\n    // Perform division in the specified base. Called by div and convertBase.\n    div = function () {\n      // Assume non-zero x and k.\n      function multiply(x, k, base) {\n        var m,\n          temp,\n          xlo,\n          xhi,\n          carry = 0,\n          i = x.length,\n          klo = k % SQRT_BASE,\n          khi = k / SQRT_BASE | 0;\n        for (x = x.slice(); i--;) {\n          xlo = x[i] % SQRT_BASE;\n          xhi = x[i] / SQRT_BASE | 0;\n          m = khi * xlo + xhi * klo;\n          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n          x[i] = temp % base;\n        }\n        if (carry) x.unshift(carry);\n        return x;\n      }\n      function compare(a, b, aL, bL) {\n        var i, cmp;\n        if (aL != bL) {\n          cmp = aL > bL ? 1 : -1;\n        } else {\n          for (i = cmp = 0; i < aL; i++) {\n            if (a[i] != b[i]) {\n              cmp = a[i] > b[i] ? 1 : -1;\n              break;\n            }\n          }\n        }\n        return cmp;\n      }\n      function subtract(a, b, aL, base) {\n        var i = 0;\n\n        // Subtract b from a.\n        for (; aL--;) {\n          a[aL] -= i;\n          i = a[aL] < b[aL] ? 1 : 0;\n          a[aL] = i * base + a[aL] - b[aL];\n        }\n\n        // Remove leading zeros.\n        for (; !a[0] && a.length > 1; a.shift());\n      }\n\n      // x: dividend, y: divisor.\n      return function (x, y, dp, rm, base) {\n        var cmp,\n          e,\n          i,\n          more,\n          n,\n          prod,\n          prodL,\n          q,\n          qc,\n          rem,\n          remL,\n          rem0,\n          xi,\n          xL,\n          yc0,\n          yL,\n          yz,\n          s = x.s == y.s ? 1 : -1,\n          xc = x.c,\n          yc = y.c;\n\n        // Either NaN, Infinity or 0?\n        if (!xc || !xc[0] || !yc || !yc[0]) {\n          return new BigNumber(\n          // Return NaN if either NaN, or both Infinity or 0.\n          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n        }\n        q = new BigNumber(s);\n        qc = q.c = [];\n        e = x.e - y.e;\n        s = dp + e + 1;\n        if (!base) {\n          base = BASE;\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n          s = s / LOG_BASE | 0;\n        }\n\n        // Result exponent may be one less then the current value of e.\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\n        if (yc[i] > (xc[i] || 0)) e--;\n        if (s < 0) {\n          qc.push(1);\n          more = true;\n        } else {\n          xL = xc.length;\n          yL = yc.length;\n          i = 0;\n          s += 2;\n\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n          n = mathfloor(base / (yc[0] + 1));\n\n          // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\n          // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\n          if (n > 1) {\n            yc = multiply(yc, n, base);\n            xc = multiply(xc, n, base);\n            yL = yc.length;\n            xL = xc.length;\n          }\n          xi = yL;\n          rem = xc.slice(0, yL);\n          remL = rem.length;\n\n          // Add zeros to make remainder as long as divisor.\n          for (; remL < yL; rem[remL++] = 0);\n          yz = yc.slice();\n          yz.unshift(0);\n          yc0 = yc[0];\n          if (yc[1] >= base / 2) yc0++;\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\n          // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\n\n          do {\n            n = 0;\n\n            // Compare divisor and remainder.\n            cmp = compare(yc, rem, yL, remL);\n\n            // If divisor < remainder.\n            if (cmp < 0) {\n              // Calculate trial digit, n.\n\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n              // n is how many times the divisor goes into the current remainder.\n              n = mathfloor(rem0 / yc0);\n\n              //  Algorithm:\n              //  1. product = divisor * trial digit (n)\n              //  2. if product > remainder: product -= divisor, n--\n              //  3. remainder -= product\n              //  4. if product was < remainder at 2:\n              //    5. compare new remainder and divisor\n              //    6. If remainder > divisor: remainder -= divisor, n++\n\n              if (n > 1) {\n                // n may be > base only when base is 3.\n                if (n >= base) n = base - 1;\n\n                // product = divisor * trial digit.\n                prod = multiply(yc, n, base);\n                prodL = prod.length;\n                remL = rem.length;\n\n                // Compare product and remainder.\n                // If product > remainder.\n                // Trial digit n too high.\n                // n is 1 too high about 5% of the time, and is not known to have\n                // ever been more than 1 too high.\n                while (compare(prod, rem, prodL, remL) == 1) {\n                  n--;\n\n                  // Subtract divisor from product.\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                  prodL = prod.length;\n                  cmp = 1;\n                }\n              } else {\n                // n is 0 or 1, cmp is -1.\n                // If n is 0, there is no need to compare yc and rem again below,\n                // so change cmp to 1 to avoid it.\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                if (n == 0) {\n                  // divisor < remainder, so n must be at least 1.\n                  cmp = n = 1;\n                }\n\n                // product = divisor\n                prod = yc.slice();\n                prodL = prod.length;\n              }\n              if (prodL < remL) prod.unshift(0);\n\n              // Subtract product from remainder.\n              subtract(rem, prod, remL, base);\n              remL = rem.length;\n\n              // If product was < remainder.\n              if (cmp == -1) {\n                // Compare divisor and new remainder.\n                // If divisor < new remainder, subtract divisor from remainder.\n                // Trial digit n too low.\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                while (compare(yc, rem, yL, remL) < 1) {\n                  n++;\n\n                  // Subtract divisor from remainder.\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\n                  remL = rem.length;\n                }\n              }\n            } else if (cmp === 0) {\n              n++;\n              rem = [0];\n            } // else cmp === 1 and n will be 0\n\n            // Add the next digit, n, to the result array.\n            qc[i++] = n;\n\n            // Update the remainder.\n            if (rem[0]) {\n              rem[remL++] = xc[xi] || 0;\n            } else {\n              rem = [xc[xi]];\n              remL = 1;\n            }\n          } while ((xi++ < xL || rem[0] != null) && s--);\n          more = rem[0] != null;\n\n          // Leading zero?\n          if (!qc[0]) qc.shift();\n        }\n        if (base == BASE) {\n          // To calculate q.e, first get the number of digits of qc[0].\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\n\n          // Caller is convertBase.\n        } else {\n          q.e = e;\n          q.r = +more;\n        }\n        return q;\n      };\n    }();\n\n    /*\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\n     * notation rounded to the specified decimal places or significant digits.\n     *\n     * n is a BigNumber.\n     * i is the index of the last digit required (i.e. the digit that may be rounded up).\n     * rm is the rounding mode.\n     * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\n     */\n    function format(n, i, rm, caller) {\n      var c0, e, ne, len, str;\n      rm = rm != null && isValidInt(rm, 0, 8, caller, roundingMode) ? rm | 0 : ROUNDING_MODE;\n      if (!n.c) return n.toString();\n      c0 = n.c[0];\n      ne = n.e;\n      if (i == null) {\n        str = coeffToString(n.c);\n        str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG ? toExponential(str, ne) : toFixedPoint(str, ne);\n      } else {\n        n = round(new BigNumber(n), i, rm);\n\n        // n.e may have changed if the value was rounded up.\n        e = n.e;\n        str = coeffToString(n.c);\n        len = str.length;\n\n        // toPrecision returns exponential notation if the number of significant digits\n        // specified is less than the number of digits necessary to represent the integer\n        // part of the value in fixed-point notation.\n\n        // Exponential notation.\n        if (caller == 19 || caller == 24 && (i <= e || e <= TO_EXP_NEG)) {\n          // Append zeros?\n          for (; len < i; str += '0', len++);\n          str = toExponential(str, e);\n\n          // Fixed-point notation.\n        } else {\n          i -= ne;\n          str = toFixedPoint(str, e);\n\n          // Append zeros?\n          if (e + 1 > len) {\n            if (--i > 0) for (str += '.'; i--; str += '0');\n          } else {\n            i += e - len;\n            if (i > 0) {\n              if (e + 1 == len) str += '.';\n              for (; i--; str += '0');\n            }\n          }\n        }\n      }\n      return n.s < 0 && c0 ? '-' + str : str;\n    }\n\n    // Handle BigNumber.max and BigNumber.min.\n    function maxOrMin(args, method) {\n      var m,\n        n,\n        i = 0;\n      if (isArray(args[0])) args = args[0];\n      m = new BigNumber(args[0]);\n      for (; ++i < args.length;) {\n        n = new BigNumber(args[i]);\n\n        // If any number is NaN, return NaN.\n        if (!n.s) {\n          m = n;\n          break;\n        } else if (method.call(m, n)) {\n          m = n;\n        }\n      }\n      return m;\n    }\n\n    /*\n     * Return true if n is an integer in range, otherwise throw.\n     * Use for argument validation when ERRORS is true.\n     */\n    function intValidatorWithErrors(n, min, max, caller, name) {\n      if (n < min || n > max || n != truncate(n)) {\n        raise(caller, (name || 'decimal places') + (n < min || n > max ? ' out of range' : ' not an integer'), n);\n      }\n      return true;\n    }\n\n    /*\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\n     * Called by minus, plus and times.\n     */\n    function normalise(n, c, e) {\n      var i = 1,\n        j = c.length;\n\n      // Remove trailing zeros.\n      for (; !c[--j]; c.pop());\n\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\n      for (j = c[0]; j >= 10; j /= 10, i++);\n\n      // Overflow?\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n        // Infinity.\n        n.c = n.e = null;\n\n        // Underflow?\n      } else if (e < MIN_EXP) {\n        // Zero.\n        n.c = [n.e = 0];\n      } else {\n        n.e = e;\n        n.c = c;\n      }\n      return n;\n    }\n\n    // Handle values that fail the validity test in BigNumber.\n    parseNumeric = function () {\n      var basePrefix = /^(-?)0([xbo])/i,\n        dotAfter = /^([^.]+)\\.$/,\n        dotBefore = /^\\.([^.]+)$/,\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n        whitespaceOrPlus = /^\\s*\\+|^\\s+|\\s+$/g;\n      return function (x, str, num, b) {\n        var base,\n          s = num ? str : str.replace(whitespaceOrPlus, '');\n\n        // No exception on ±Infinity or NaN.\n        if (isInfinityOrNaN.test(s)) {\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n        } else {\n          if (!num) {\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n            s = s.replace(basePrefix, function (m, p1, p2) {\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n              return !b || b == base ? p1 : m;\n            });\n            if (b) {\n              base = b;\n\n              // E.g. '1.' to '1', '.1' to '0.1'\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n            }\n            if (str != s) return new BigNumber(s, base);\n          }\n\n          // 'new BigNumber() not a number: {n}'\n          // 'new BigNumber() not a base {b} number: {n}'\n          if (ERRORS) raise(id, 'not a' + (b ? ' base ' + b : '') + ' number', str);\n          x.s = null;\n        }\n        x.c = x.e = null;\n        id = 0;\n      };\n    }();\n\n    // Throw a BigNumber Error.\n    function raise(caller, msg, val) {\n      var error = new Error(['new BigNumber',\n      // 0\n      'cmp',\n      // 1\n      'config',\n      // 2\n      'div',\n      // 3\n      'divToInt',\n      // 4\n      'eq',\n      // 5\n      'gt',\n      // 6\n      'gte',\n      // 7\n      'lt',\n      // 8\n      'lte',\n      // 9\n      'minus',\n      // 10\n      'mod',\n      // 11\n      'plus',\n      // 12\n      'precision',\n      // 13\n      'random',\n      // 14\n      'round',\n      // 15\n      'shift',\n      // 16\n      'times',\n      // 17\n      'toDigits',\n      // 18\n      'toExponential',\n      // 19\n      'toFixed',\n      // 20\n      'toFormat',\n      // 21\n      'toFraction',\n      // 22\n      'pow',\n      // 23\n      'toPrecision',\n      // 24\n      'toString',\n      // 25\n      'BigNumber' // 26\n      ][caller] + '() ' + msg + ': ' + val);\n      error.name = 'BigNumber Error';\n      id = 0;\n      throw error;\n    }\n\n    /*\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\n     * If r is truthy, it is known that there are more digits after the rounding digit.\n     */\n    function round(x, sd, rm, r) {\n      var d,\n        i,\n        j,\n        k,\n        n,\n        ni,\n        rd,\n        xc = x.c,\n        pows10 = POWS_TEN;\n\n      // if x is not Infinity or NaN...\n      if (xc) {\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\n        // ni is the index of n within x.c.\n        // d is the number of digits of n.\n        // i is the index of rd within n including leading zeros.\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\n        out: {\n          // Get the number of digits of the first element of xc.\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n          i = sd - d;\n\n          // If the rounding digit is in the first element of xc...\n          if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            n = xc[ni = 0];\n\n            // Get the rounding digit at index j of n.\n            rd = n / pows10[d - j - 1] % 10 | 0;\n          } else {\n            ni = mathceil((i + 1) / LOG_BASE);\n            if (ni >= xc.length) {\n              if (r) {\n                // Needed by sqrt.\n                for (; xc.length <= ni; xc.push(0));\n                n = rd = 0;\n                d = 1;\n                i %= LOG_BASE;\n                j = i - LOG_BASE + 1;\n              } else {\n                break out;\n              }\n            } else {\n              n = k = xc[ni];\n\n              // Get the number of digits of n.\n              for (d = 1; k >= 10; k /= 10, d++);\n\n              // Get the index of rd within n.\n              i %= LOG_BASE;\n\n              // Get the index of rd within n, adjusted for leading zeros.\n              // The number of leading zeros of n is given by LOG_BASE - d.\n              j = i - LOG_BASE + d;\n\n              // Get the rounding digit at index j of n.\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n            }\n          }\n          r = r || sd < 0 ||\n          // Are there any non-zero digits after the rounding digit?\n          // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\n          // Check whether the digit to the left of the rounding digit is odd.\n          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n          if (sd < 1 || !xc[0]) {\n            xc.length = 0;\n            if (r) {\n              // Convert sd to decimal places.\n              sd -= x.e + 1;\n\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n              xc[0] = pows10[sd % LOG_BASE];\n              x.e = -sd || 0;\n            } else {\n              // Zero.\n              xc[0] = x.e = 0;\n            }\n            return x;\n          }\n\n          // Remove excess digits.\n          if (i == 0) {\n            xc.length = ni;\n            k = 1;\n            ni--;\n          } else {\n            xc.length = ni + 1;\n            k = pows10[LOG_BASE - i];\n\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n            // j > 0 means i > number of leading zeros of n.\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n          }\n\n          // Round up?\n          if (r) {\n            for (;;) {\n              // If the digit to be rounded up is in the first element of xc...\n              if (ni == 0) {\n                // i will be the length of xc[0] before k is added.\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n                j = xc[0] += k;\n                for (k = 1; j >= 10; j /= 10, k++);\n\n                // if i != k the length has increased.\n                if (i != k) {\n                  x.e++;\n                  if (xc[0] == BASE) xc[0] = 1;\n                }\n                break;\n              } else {\n                xc[ni] += k;\n                if (xc[ni] != BASE) break;\n                xc[ni--] = 0;\n                k = 1;\n              }\n            }\n          }\n\n          // Remove trailing zeros.\n          for (i = xc.length; xc[--i] === 0; xc.pop());\n        }\n\n        // Overflow? Infinity.\n        if (x.e > MAX_EXP) {\n          x.c = x.e = null;\n\n          // Underflow? Zero.\n        } else if (x.e < MIN_EXP) {\n          x.c = [x.e = 0];\n        }\n      }\n      return x;\n    }\n\n    // PROTOTYPE/INSTANCE METHODS\n\n    /*\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\n     */\n    P.absoluteValue = P.abs = function () {\n      var x = new BigNumber(this);\n      if (x.s < 0) x.s = 1;\n      return x;\n    };\n\n    /*\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\n     * number in the direction of Infinity.\n     */\n    P.ceil = function () {\n      return round(new BigNumber(this), this.e + 1, 2);\n    };\n\n    /*\n     * Return\n     * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\n     * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\n     * 0 if they have the same value,\n     * or null if the value of either is NaN.\n     */\n    P.comparedTo = P.cmp = function (y, b) {\n      id = 1;\n      return compare(this, new BigNumber(y, b));\n    };\n\n    /*\n     * Return the number of decimal places of the value of this BigNumber, or null if the value\n     * of this BigNumber is ±Infinity or NaN.\n     */\n    P.decimalPlaces = P.dp = function () {\n      var n,\n        v,\n        c = this.c;\n      if (!c) return null;\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\n\n      // Subtract the number of trailing zeros of the last number.\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n      if (n < 0) n = 0;\n      return n;\n    };\n\n    /*\n     *  n / 0 = I\n     *  n / N = N\n     *  n / I = 0\n     *  0 / n = 0\n     *  0 / 0 = N\n     *  0 / N = N\n     *  0 / I = 0\n     *  N / n = N\n     *  N / 0 = N\n     *  N / N = N\n     *  N / I = N\n     *  I / n = I\n     *  I / 0 = I\n     *  I / N = N\n     *  I / I = N\n     *\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n     */\n    P.dividedBy = P.div = function (y, b) {\n      id = 3;\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n    };\n\n    /*\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\n     * BigNumber by the value of BigNumber(y, b).\n     */\n    P.dividedToIntegerBy = P.divToInt = function (y, b) {\n      id = 4;\n      return div(this, new BigNumber(y, b), 0, 1);\n    };\n\n    /*\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\n     * otherwise returns false.\n     */\n    P.equals = P.eq = function (y, b) {\n      id = 5;\n      return compare(this, new BigNumber(y, b)) === 0;\n    };\n\n    /*\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\n     * number in the direction of -Infinity.\n     */\n    P.floor = function () {\n      return round(new BigNumber(this), this.e + 1, 3);\n    };\n\n    /*\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\n     * otherwise returns false.\n     */\n    P.greaterThan = P.gt = function (y, b) {\n      id = 6;\n      return compare(this, new BigNumber(y, b)) > 0;\n    };\n\n    /*\n     * Return true if the value of this BigNumber is greater than or equal to the value of\n     * BigNumber(y, b), otherwise returns false.\n     */\n    P.greaterThanOrEqualTo = P.gte = function (y, b) {\n      id = 7;\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n    };\n\n    /*\n     * Return true if the value of this BigNumber is a finite number, otherwise returns false.\n     */\n    P.isFinite = function () {\n      return !!this.c;\n    };\n\n    /*\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\n     */\n    P.isInteger = P.isInt = function () {\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n    };\n\n    /*\n     * Return true if the value of this BigNumber is NaN, otherwise returns false.\n     */\n    P.isNaN = function () {\n      return !this.s;\n    };\n\n    /*\n     * Return true if the value of this BigNumber is negative, otherwise returns false.\n     */\n    P.isNegative = P.isNeg = function () {\n      return this.s < 0;\n    };\n\n    /*\n     * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\n     */\n    P.isZero = function () {\n      return !!this.c && this.c[0] == 0;\n    };\n\n    /*\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\n     * otherwise returns false.\n     */\n    P.lessThan = P.lt = function (y, b) {\n      id = 8;\n      return compare(this, new BigNumber(y, b)) < 0;\n    };\n\n    /*\n     * Return true if the value of this BigNumber is less than or equal to the value of\n     * BigNumber(y, b), otherwise returns false.\n     */\n    P.lessThanOrEqualTo = P.lte = function (y, b) {\n      id = 9;\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n    };\n\n    /*\n     *  n - 0 = n\n     *  n - N = N\n     *  n - I = -I\n     *  0 - n = -n\n     *  0 - 0 = 0\n     *  0 - N = N\n     *  0 - I = -I\n     *  N - n = N\n     *  N - 0 = N\n     *  N - N = N\n     *  N - I = N\n     *  I - n = I\n     *  I - 0 = I\n     *  I - N = N\n     *  I - I = N\n     *\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\n     * BigNumber(y, b).\n     */\n    P.minus = P.sub = function (y, b) {\n      var i,\n        j,\n        t,\n        xLTy,\n        x = this,\n        a = x.s;\n      id = 10;\n      y = new BigNumber(y, b);\n      b = y.s;\n\n      // Either NaN?\n      if (!a || !b) return new BigNumber(NaN);\n\n      // Signs differ?\n      if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n      }\n      var xe = x.e / LOG_BASE,\n        ye = y.e / LOG_BASE,\n        xc = x.c,\n        yc = y.c;\n      if (!xe || !ye) {\n        // Either Infinity?\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\n\n        // Either zero?\n        if (!xc[0] || !yc[0]) {\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\n          // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n          ROUNDING_MODE == 3 ? -0 : 0);\n        }\n      }\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice();\n\n      // Determine which is the bigger number.\n      if (a = xe - ye) {\n        if (xLTy = a < 0) {\n          a = -a;\n          t = xc;\n        } else {\n          ye = xe;\n          t = yc;\n        }\n        t.reverse();\n\n        // Prepend zeros to equalise exponents.\n        for (b = a; b--; t.push(0));\n        t.reverse();\n      } else {\n        // Exponents equal. Check digit by digit.\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n        for (a = b = 0; b < j; b++) {\n          if (xc[b] != yc[b]) {\n            xLTy = xc[b] < yc[b];\n            break;\n          }\n        }\n      }\n\n      // x < y? Point xc to the array of the bigger number.\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n      b = (j = yc.length) - (i = xc.length);\n\n      // Append zeros to xc if shorter.\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n      if (b > 0) for (; b--; xc[i++] = 0);\n      b = BASE - 1;\n\n      // Subtract yc from xc.\n      for (; j > a;) {\n        if (xc[--j] < yc[j]) {\n          for (i = j; i && !xc[--i]; xc[i] = b);\n          --xc[i];\n          xc[j] += BASE;\n        }\n        xc[j] -= yc[j];\n      }\n\n      // Remove leading zeros and adjust exponent accordingly.\n      for (; xc[0] == 0; xc.shift(), --ye);\n\n      // Zero?\n      if (!xc[0]) {\n        // Following IEEE 754 (2008) 6.3,\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\n        y.c = [y.e = 0];\n        return y;\n      }\n\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n      // for finite x and y.\n      return normalise(y, xc, ye);\n    };\n\n    /*\n     *   n % 0 =  N\n     *   n % N =  N\n     *   n % I =  n\n     *   0 % n =  0\n     *  -0 % n = -0\n     *   0 % 0 =  N\n     *   0 % N =  N\n     *   0 % I =  0\n     *   N % n =  N\n     *   N % 0 =  N\n     *   N % N =  N\n     *   N % I =  N\n     *   I % n =  N\n     *   I % 0 =  N\n     *   I % N =  N\n     *   I % I =  N\n     *\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\n     */\n    P.modulo = P.mod = function (y, b) {\n      var q,\n        s,\n        x = this;\n      id = 11;\n      y = new BigNumber(y, b);\n\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n      if (!x.c || !y.s || y.c && !y.c[0]) {\n        return new BigNumber(NaN);\n\n        // Return x if y is Infinity or x is zero.\n      } else if (!y.c || x.c && !x.c[0]) {\n        return new BigNumber(x);\n      }\n      if (MODULO_MODE == 9) {\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\n        // r = x - qy    where  0 <= r < abs(y)\n        s = y.s;\n        y.s = 1;\n        q = div(x, y, 0, 3);\n        y.s = s;\n        q.s *= s;\n      } else {\n        q = div(x, y, 0, MODULO_MODE);\n      }\n      return x.minus(q.times(y));\n    };\n\n    /*\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\n     * i.e. multiplied by -1.\n     */\n    P.negated = P.neg = function () {\n      var x = new BigNumber(this);\n      x.s = -x.s || null;\n      return x;\n    };\n\n    /*\n     *  n + 0 = n\n     *  n + N = N\n     *  n + I = I\n     *  0 + n = n\n     *  0 + 0 = 0\n     *  0 + N = N\n     *  0 + I = I\n     *  N + n = N\n     *  N + 0 = N\n     *  N + N = N\n     *  N + I = N\n     *  I + n = I\n     *  I + 0 = I\n     *  I + N = N\n     *  I + I = I\n     *\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\n     * BigNumber(y, b).\n     */\n    P.plus = P.add = function (y, b) {\n      var t,\n        x = this,\n        a = x.s;\n      id = 12;\n      y = new BigNumber(y, b);\n      b = y.s;\n\n      // Either NaN?\n      if (!a || !b) return new BigNumber(NaN);\n\n      // Signs differ?\n      if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n      }\n      var xe = x.e / LOG_BASE,\n        ye = y.e / LOG_BASE,\n        xc = x.c,\n        yc = y.c;\n      if (!xe || !ye) {\n        // Return ±Infinity if either ±Infinity.\n        if (!xc || !yc) return new BigNumber(a / 0);\n\n        // Either zero?\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n      }\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice();\n\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n      if (a = xe - ye) {\n        if (a > 0) {\n          ye = xe;\n          t = yc;\n        } else {\n          a = -a;\n          t = xc;\n        }\n        t.reverse();\n        for (; a--; t.push(0));\n        t.reverse();\n      }\n      a = xc.length;\n      b = yc.length;\n\n      // Point xc to the longer array, and b to the shorter length.\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\n\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n      for (a = 0; b;) {\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n        xc[b] %= BASE;\n      }\n      if (a) {\n        xc.unshift(a);\n        ++ye;\n      }\n\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n      // ye = MAX_EXP + 1 possible\n      return normalise(y, xc, ye);\n    };\n\n    /*\n     * Return the number of significant digits of the value of this BigNumber.\n     *\n     * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\n     */\n    P.precision = P.sd = function (z) {\n      var n,\n        v,\n        x = this,\n        c = x.c;\n\n      // 'precision() argument not a boolean or binary digit: {z}'\n      if (z != null && z !== !!z && z !== 1 && z !== 0) {\n        if (ERRORS) raise(13, 'argument' + notBool, z);\n        if (z != !!z) z = null;\n      }\n      if (!c) return null;\n      v = c.length - 1;\n      n = v * LOG_BASE + 1;\n      if (v = c[v]) {\n        // Subtract the number of trailing zeros of the last element.\n        for (; v % 10 == 0; v /= 10, n--);\n\n        // Add the number of digits of the first element.\n        for (v = c[0]; v >= 10; v /= 10, n++);\n      }\n      if (z && x.e + 1 > n) n = x.e + 1;\n      return n;\n    };\n\n    /*\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\n     * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\n     * omitted.\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * 'round() decimal places out of range: {dp}'\n     * 'round() decimal places not an integer: {dp}'\n     * 'round() rounding mode not an integer: {rm}'\n     * 'round() rounding mode out of range: {rm}'\n     */\n    P.round = function (dp, rm) {\n      var n = new BigNumber(this);\n      if (dp == null || isValidInt(dp, 0, MAX, 15)) {\n        round(n, ~~dp + this.e + 1, rm == null || !isValidInt(rm, 0, 8, 15, roundingMode) ? ROUNDING_MODE : rm | 0);\n      }\n      return n;\n    };\n\n    /*\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\n     *\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\n     *\n     * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\n     * otherwise.\n     *\n     * 'shift() argument not an integer: {k}'\n     * 'shift() argument out of range: {k}'\n     */\n    P.shift = function (k) {\n      var n = this;\n      return isValidInt(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument')\n\n      // k < 1e+21, or truncate(k) will produce exponential notation.\n      ? n.times('1e' + truncate(k)) : new BigNumber(n.c && n.c[0] && (k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER) ? n.s * (k < 0 ? 0 : 1 / 0) : n);\n    };\n\n    /*\n     *  sqrt(-n) =  N\n     *  sqrt( N) =  N\n     *  sqrt(-I) =  N\n     *  sqrt( I) =  I\n     *  sqrt( 0) =  0\n     *  sqrt(-0) = -0\n     *\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n     */\n    P.squareRoot = P.sqrt = function () {\n      var m,\n        n,\n        r,\n        rep,\n        t,\n        x = this,\n        c = x.c,\n        s = x.s,\n        e = x.e,\n        dp = DECIMAL_PLACES + 4,\n        half = new BigNumber('0.5');\n\n      // Negative/NaN/Infinity/zero?\n      if (s !== 1 || !c || !c[0]) {\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n      }\n\n      // Initial estimate.\n      s = Math.sqrt(+x);\n\n      // Math.sqrt underflow/overflow?\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n      if (s == 0 || s == 1 / 0) {\n        n = coeffToString(c);\n        if ((n.length + e) % 2 == 0) n += '0';\n        s = Math.sqrt(n);\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n        if (s == 1 / 0) {\n          n = '1e' + e;\n        } else {\n          n = s.toExponential();\n          n = n.slice(0, n.indexOf('e') + 1) + e;\n        }\n        r = new BigNumber(n);\n      } else {\n        r = new BigNumber(s + '');\n      }\n\n      // Check for zero.\n      // r could be zero if MIN_EXP is changed after the this value was created.\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n      // coeffToString to throw.\n      if (r.c[0]) {\n        e = r.e;\n        s = e + dp;\n        if (s < 3) s = 0;\n\n        // Newton-Raphson iteration.\n        for (;;) {\n          t = r;\n          r = half.times(t.plus(div(x, t, dp, 1)));\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n            // The exponent of r may here be one less than the final result exponent,\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n            // are indexed correctly.\n            if (r.e < e) --s;\n            n = n.slice(s - 3, s + 1);\n\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n            // iteration.\n            if (n == '9999' || !rep && n == '4999') {\n              // On the first iteration only, check to see if rounding up gives the\n              // exact result as the nines may infinitely repeat.\n              if (!rep) {\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\n                if (t.times(t).eq(x)) {\n                  r = t;\n                  break;\n                }\n              }\n              dp += 4;\n              s += 4;\n              rep = 1;\n            } else {\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n              // result. If not, then there are further digits and m will be truthy.\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n                // Truncate to the first rounding digit.\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                m = !r.times(r).eq(x);\n              }\n              break;\n            }\n          }\n        }\n      }\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n    };\n\n    /*\n     *  n * 0 = 0\n     *  n * N = N\n     *  n * I = I\n     *  0 * n = 0\n     *  0 * 0 = 0\n     *  0 * N = N\n     *  0 * I = N\n     *  N * n = N\n     *  N * 0 = N\n     *  N * N = N\n     *  N * I = N\n     *  I * n = I\n     *  I * 0 = N\n     *  I * N = N\n     *  I * I = I\n     *\n     * Return a new BigNumber whose value is the value of this BigNumber times the value of\n     * BigNumber(y, b).\n     */\n    P.times = P.mul = function (y, b) {\n      var c,\n        e,\n        i,\n        j,\n        k,\n        m,\n        xcL,\n        xlo,\n        xhi,\n        ycL,\n        ylo,\n        yhi,\n        zc,\n        base,\n        sqrtBase,\n        x = this,\n        xc = x.c,\n        yc = (id = 17, y = new BigNumber(y, b)).c;\n\n      // Either NaN, ±Infinity or ±0?\n      if (!xc || !yc || !xc[0] || !yc[0]) {\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n          y.c = y.e = y.s = null;\n        } else {\n          y.s *= x.s;\n\n          // Return ±Infinity if either is ±Infinity.\n          if (!xc || !yc) {\n            y.c = y.e = null;\n\n            // Return ±0 if either is ±0.\n          } else {\n            y.c = [0];\n            y.e = 0;\n          }\n        }\n        return y;\n      }\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n      y.s *= x.s;\n      xcL = xc.length;\n      ycL = yc.length;\n\n      // Ensure xc points to longer array and xcL to its length.\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\n\n      // Initialise the result array with zeros.\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\n      base = BASE;\n      sqrtBase = SQRT_BASE;\n      for (i = ycL; --i >= 0;) {\n        c = 0;\n        ylo = yc[i] % sqrtBase;\n        yhi = yc[i] / sqrtBase | 0;\n        for (k = xcL, j = i + k; j > i;) {\n          xlo = xc[--k] % sqrtBase;\n          xhi = xc[k] / sqrtBase | 0;\n          m = yhi * xlo + xhi * ylo;\n          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n          zc[j--] = xlo % base;\n        }\n        zc[j] = c;\n      }\n      if (c) {\n        ++e;\n      } else {\n        zc.shift();\n      }\n      return normalise(y, zc, e);\n    };\n\n    /*\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\n     * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n     *\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * 'toDigits() precision out of range: {sd}'\n     * 'toDigits() precision not an integer: {sd}'\n     * 'toDigits() rounding mode not an integer: {rm}'\n     * 'toDigits() rounding mode out of range: {rm}'\n     */\n    P.toDigits = function (sd, rm) {\n      var n = new BigNumber(this);\n      sd = sd == null || !isValidInt(sd, 1, MAX, 18, 'precision') ? null : sd | 0;\n      rm = rm == null || !isValidInt(rm, 0, 8, 18, roundingMode) ? ROUNDING_MODE : rm | 0;\n      return sd ? round(n, sd, rm) : n;\n    };\n\n    /*\n     * Return a string representing the value of this BigNumber in exponential notation and\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * 'toExponential() decimal places not an integer: {dp}'\n     * 'toExponential() decimal places out of range: {dp}'\n     * 'toExponential() rounding mode not an integer: {rm}'\n     * 'toExponential() rounding mode out of range: {rm}'\n     */\n    P.toExponential = function (dp, rm) {\n      return format(this, dp != null && isValidInt(dp, 0, MAX, 19) ? ~~dp + 1 : null, rm, 19);\n    };\n\n    /*\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n     *\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * 'toFixed() decimal places not an integer: {dp}'\n     * 'toFixed() decimal places out of range: {dp}'\n     * 'toFixed() rounding mode not an integer: {rm}'\n     * 'toFixed() rounding mode out of range: {rm}'\n     */\n    P.toFixed = function (dp, rm) {\n      return format(this, dp != null && isValidInt(dp, 0, MAX, 20) ? ~~dp + this.e + 1 : null, rm, 20);\n    };\n\n    /*\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\n     * of the FORMAT object (see BigNumber.config).\n     *\n     * FORMAT = {\n     *      decimalSeparator : '.',\n     *      groupSeparator : ',',\n     *      groupSize : 3,\n     *      secondaryGroupSize : 0,\n     *      fractionGroupSeparator : '\\xA0',    // non-breaking space\n     *      fractionGroupSize : 0\n     * };\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * 'toFormat() decimal places not an integer: {dp}'\n     * 'toFormat() decimal places out of range: {dp}'\n     * 'toFormat() rounding mode not an integer: {rm}'\n     * 'toFormat() rounding mode out of range: {rm}'\n     */\n    P.toFormat = function (dp, rm) {\n      var str = format(this, dp != null && isValidInt(dp, 0, MAX, 21) ? ~~dp + this.e + 1 : null, rm, 21);\n      if (this.c) {\n        var i,\n          arr = str.split('.'),\n          g1 = +FORMAT.groupSize,\n          g2 = +FORMAT.secondaryGroupSize,\n          groupSeparator = FORMAT.groupSeparator,\n          intPart = arr[0],\n          fractionPart = arr[1],\n          isNeg = this.s < 0,\n          intDigits = isNeg ? intPart.slice(1) : intPart,\n          len = intDigits.length;\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n        if (g1 > 0 && len > 0) {\n          i = len % g1 || g1;\n          intPart = intDigits.substr(0, i);\n          for (; i < len; i += g1) {\n            intPart += groupSeparator + intDigits.substr(i, g1);\n          }\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n          if (isNeg) intPart = '-' + intPart;\n        }\n        str = fractionPart ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + FORMAT.fractionGroupSeparator) : fractionPart) : intPart;\n      }\n      return str;\n    };\n\n    /*\n     * Return a string array representing the value of this BigNumber as a simple fraction with\n     * an integer numerator and an integer denominator. The denominator will be a positive\n     * non-zero value less than or equal to the specified maximum denominator. If a maximum\n     * denominator is not specified, the denominator will be the lowest value necessary to\n     * represent the number exactly.\n     *\n     * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\n     *\n     * 'toFraction() max denominator not an integer: {md}'\n     * 'toFraction() max denominator out of range: {md}'\n     */\n    P.toFraction = function (md) {\n      var arr,\n        d0,\n        d2,\n        e,\n        exp,\n        n,\n        n0,\n        q,\n        s,\n        k = ERRORS,\n        x = this,\n        xc = x.c,\n        d = new BigNumber(ONE),\n        n1 = d0 = new BigNumber(ONE),\n        d1 = n0 = new BigNumber(ONE);\n      if (md != null) {\n        ERRORS = false;\n        n = new BigNumber(md);\n        ERRORS = k;\n        if (!(k = n.isInt()) || n.lt(ONE)) {\n          if (ERRORS) {\n            raise(22, 'max denominator ' + (k ? 'out of range' : 'not an integer'), md);\n          }\n\n          // ERRORS is false:\n          // If md is a finite non-integer >= 1, round it to an integer and use it.\n          md = !k && n.c && round(n, n.e + 1, 1).gte(ONE) ? n : null;\n        }\n      }\n      if (!xc) return x.toString();\n      s = coeffToString(xc);\n\n      // Determine initial denominator.\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n      e = d.e = s.length - x.e - 1;\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n      md = !md || n.cmp(d) > 0 ? e > 0 ? d : n1 : n;\n      exp = MAX_EXP;\n      MAX_EXP = 1 / 0;\n      n = new BigNumber(s);\n\n      // n0 = d1 = 0\n      n0.c[0] = 0;\n      for (;;) {\n        q = div(n, d, 0, 1);\n        d2 = d0.plus(q.times(d1));\n        if (d2.cmp(md) == 1) break;\n        d0 = d1;\n        d1 = d2;\n        n1 = n0.plus(q.times(d2 = n1));\n        n0 = d2;\n        d = n.minus(q.times(d2 = d));\n        n = d2;\n      }\n      d2 = div(md.minus(d0), d1, 0, 1);\n      n0 = n0.plus(d2.times(n1));\n      d0 = d0.plus(d2.times(d1));\n      n0.s = n1.s = x.s;\n      e *= 2;\n\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\n      arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().cmp(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1.toString(), d1.toString()] : [n0.toString(), d0.toString()];\n      MAX_EXP = exp;\n      return arr;\n    };\n\n    /*\n     * Return the value of this BigNumber converted to a number primitive.\n     */\n    P.toNumber = function () {\n      var x = this;\n\n      // Ensure zero has correct sign.\n      return +x || (x.s ? x.s * 0 : NaN);\n    };\n\n    /*\n     * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\n     * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.\n     *\n     * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.\n     * (Performs 54 loop iterations for n of 9007199254740992.)\n     *\n     * 'pow() exponent not an integer: {n}'\n     * 'pow() exponent out of range: {n}'\n     */\n    P.toPower = P.pow = function (n) {\n      var k,\n        y,\n        i = mathfloor(n < 0 ? -n : +n),\n        x = this;\n\n      // Pass ±Infinity to Math.pow if exponent is out of range.\n      if (!isValidInt(n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent') && (!isFinite(n) || i > MAX_SAFE_INTEGER && (n /= 0) || parseFloat(n) != n && !(n = NaN))) {\n        return new BigNumber(Math.pow(+x, n));\n      }\n\n      // Truncating each coefficient array to a length of k after each multiplication equates\n      // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a\n      // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)\n      k = POW_PRECISION ? mathceil(POW_PRECISION / LOG_BASE + 2) : 0;\n      y = new BigNumber(ONE);\n      for (;;) {\n        if (i % 2) {\n          y = y.times(x);\n          if (!y.c) break;\n          if (k && y.c.length > k) y.c.length = k;\n        }\n        i = mathfloor(i / 2);\n        if (!i) break;\n        x = x.times(x);\n        if (k && x.c && x.c.length > k) x.c.length = k;\n      }\n      if (n < 0) y = ONE.div(y);\n      return k ? round(y, POW_PRECISION, ROUNDING_MODE) : y;\n    };\n\n    /*\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\n     * necessary to represent the integer part of the value in fixed-point notation, then use\n     * exponential notation.\n     *\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * 'toPrecision() precision not an integer: {sd}'\n     * 'toPrecision() precision out of range: {sd}'\n     * 'toPrecision() rounding mode not an integer: {rm}'\n     * 'toPrecision() rounding mode out of range: {rm}'\n     */\n    P.toPrecision = function (sd, rm) {\n      return format(this, sd != null && isValidInt(sd, 1, MAX, 24, 'precision') ? sd | 0 : null, rm, 24);\n    };\n\n    /*\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\n     * TO_EXP_NEG, return exponential notation.\n     *\n     * [b] {number} Integer, 2 to 64 inclusive.\n     *\n     * 'toString() base not an integer: {b}'\n     * 'toString() base out of range: {b}'\n     */\n    P.toString = function (b) {\n      var str,\n        n = this,\n        s = n.s,\n        e = n.e;\n\n      // Infinity or NaN?\n      if (e === null) {\n        if (s) {\n          str = 'Infinity';\n          if (s < 0) str = '-' + str;\n        } else {\n          str = 'NaN';\n        }\n      } else {\n        str = coeffToString(n.c);\n        if (b == null || !isValidInt(b, 2, 64, 25, 'base')) {\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);\n        } else {\n          str = convertBase(toFixedPoint(str, e), b | 0, 10, s);\n        }\n        if (s < 0 && n.c[0]) str = '-' + str;\n      }\n      return str;\n    };\n\n    /*\n     * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\n     * number.\n     */\n    P.truncated = P.trunc = function () {\n      return round(new BigNumber(this), this.e + 1, 1);\n    };\n\n    /*\n     * Return as toString, but do not accept a base argument.\n     */\n    P.valueOf = P.toJSON = function () {\n      return this.toString();\n    };\n\n    // Aliases for BigDecimal methods.\n    //P.add = P.plus;         // P.add included above\n    //P.subtract = P.minus;   // P.sub included above\n    //P.multiply = P.times;   // P.mul included above\n    //P.divide = P.div;\n    //P.remainder = P.mod;\n    //P.compareTo = P.cmp;\n    //P.negate = P.neg;\n\n    if (configObj != null) BigNumber.config(configObj);\n    return BigNumber;\n  }\n\n  // PRIVATE HELPER FUNCTIONS\n\n  function bitFloor(n) {\n    var i = n | 0;\n    return n > 0 || n === i ? i : i - 1;\n  }\n\n  // Return a coefficient array as a string of base 10 digits.\n  function coeffToString(a) {\n    var s,\n      z,\n      i = 1,\n      j = a.length,\n      r = a[0] + '';\n    for (; i < j;) {\n      s = a[i++] + '';\n      z = LOG_BASE - s.length;\n      for (; z--; s = '0' + s);\n      r += s;\n    }\n\n    // Determine trailing zeros.\n    for (j = r.length; r.charCodeAt(--j) === 48;);\n    return r.slice(0, j + 1 || 1);\n  }\n\n  // Compare the value of BigNumbers x and y.\n  function compare(x, y) {\n    var a,\n      b,\n      xc = x.c,\n      yc = y.c,\n      i = x.s,\n      j = y.s,\n      k = x.e,\n      l = y.e;\n\n    // Either NaN?\n    if (!i || !j) return null;\n    a = xc && !xc[0];\n    b = yc && !yc[0];\n\n    // Either zero?\n    if (a || b) return a ? b ? 0 : -j : i;\n\n    // Signs differ?\n    if (i != j) return i;\n    a = i < 0;\n    b = k == l;\n\n    // Either Infinity?\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\n\n    // Compare exponents.\n    if (!b) return k > l ^ a ? 1 : -1;\n    j = (k = xc.length) < (l = yc.length) ? k : l;\n\n    // Compare digit by digit.\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n    // Compare lengths.\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\n  }\n\n  /*\n   * Return true if n is a valid number in range, otherwise false.\n   * Use for argument validation when ERRORS is false.\n   * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\n   */\n  function intValidatorNoErrors(n, min, max) {\n    return (n = truncate(n)) >= min && n <= max;\n  }\n  function isArray(obj) {\n    return Object.prototype.toString.call(obj) == '[object Array]';\n  }\n\n  /*\n   * Convert string of baseIn to an array of numbers of baseOut.\n   * Eg. convertBase('255', 10, 16) returns [15, 15].\n   * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\n   */\n  function toBaseOut(str, baseIn, baseOut) {\n    var j,\n      arr = [0],\n      arrL,\n      i = 0,\n      len = str.length;\n    for (; i < len;) {\n      for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n      arr[j = 0] += ALPHABET.indexOf(str.charAt(i++));\n      for (; j < arr.length; j++) {\n        if (arr[j] > baseOut - 1) {\n          if (arr[j + 1] == null) arr[j + 1] = 0;\n          arr[j + 1] += arr[j] / baseOut | 0;\n          arr[j] %= baseOut;\n        }\n      }\n    }\n    return arr.reverse();\n  }\n  function toExponential(str, e) {\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n  }\n  function toFixedPoint(str, e) {\n    var len, z;\n\n    // Negative exponent?\n    if (e < 0) {\n      // Prepend zeros.\n      for (z = '0.'; ++e; z += '0');\n      str = z + str;\n\n      // Positive exponent\n    } else {\n      len = str.length;\n\n      // Append zeros.\n      if (++e > len) {\n        for (z = '0', e -= len; --e; z += '0');\n        str += z;\n      } else if (e < len) {\n        str = str.slice(0, e) + '.' + str.slice(e);\n      }\n    }\n    return str;\n  }\n  function truncate(n) {\n    n = parseFloat(n);\n    return n < 0 ? mathceil(n) : mathfloor(n);\n  }\n\n  // EXPORT\n\n  BigNumber = another();\n\n  // AMD.\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return BigNumber;\n    });\n\n    // Node and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    module.exports = BigNumber;\n    if (!crypto) try {\n      crypto = require('crypto');\n    } catch (e) {}\n\n    // Browser.\n  } else {\n    global.BigNumber = BigNumber;\n  }\n})(this);","map":{"version":3,"names":["global","BigNumber","crypto","parseNumeric","isNumeric","mathceil","Math","ceil","mathfloor","floor","notBool","roundingMode","tooManyDigits","ALPHABET","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","another","configObj","div","id","P","prototype","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","ERRORS","isValidInt","intValidatorWithErrors","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","n","b","c","e","i","num","len","str","x","raise","s","slice","test","charCodeAt","round","RegExp","replace","length","convertBase","indexOf","search","substring","push","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","v","p","r","a","arguments","o","has","hasOwnProperty","isArray","intValidatorNoErrors","max","maxOrMin","lt","min","gt","random","pow2_53","random53bitInt","dp","k","rand","getRandomValues","Uint32Array","randomBytes","copy","pop","shift","baseOut","baseIn","sign","d","xc","y","rm","toLowerCase","pow","toBaseOut","toFixedPoint","coeffToString","unshift","charAt","multiply","base","m","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","format","caller","c0","ne","toString","toExponential","args","method","call","name","truncate","normalise","j","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","msg","val","error","Error","sd","ni","rd","pows10","out","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","divToInt","equals","eq","greaterThan","greaterThanOrEqualTo","gte","isFinite","isInteger","isInt","isNegative","isNeg","isZero","lessThan","lessThanOrEqualTo","lte","minus","sub","t","xLTy","plus","xe","ye","reverse","modulo","mod","times","negated","neg","add","precision","z","squareRoot","sqrt","rep","half","mul","xcL","ycL","ylo","yhi","zc","sqrtBase","toDigits","toFixed","toFormat","arr","split","g1","g2","intPart","fractionPart","intDigits","substr","toFraction","md","d0","d2","exp","n0","n1","d1","toNumber","toPower","parseFloat","toPrecision","truncated","trunc","valueOf","toJSON","l","obj","Object","arrL","define","amd","module","exports","require"],"sources":["E:/Career/University at Buffalo/Semester 2/CSE_Blockchain/Project/playground/research-papers-bid/node_modules/bignumber.js/bignumber.js"],"sourcesContent":["/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */\n\n;(function (global) {\n    'use strict';\n\n    /*\n      bignumber.js v2.0.7\n      A JavaScript library for arbitrary-precision arithmetic.\n      https://github.com/MikeMcl/bignumber.js\n      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>\n      MIT Expat Licence\n    */\n\n\n    var BigNumber, crypto, parseNumeric,\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n        mathceil = Math.ceil,\n        mathfloor = Math.floor,\n        notBool = ' not a boolean or binary digit',\n        roundingMode = 'rounding mode',\n        tooManyDigits = 'number type has more than 15 significant digits',\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\n        BASE = 1e14,\n        LOG_BASE = 14,\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n        SQRT_BASE = 1e7,\n\n        /*\n         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\n         * exception is thrown (if ERRORS is true).\n         */\n        MAX = 1E9;                                   // 0 to MAX_INT32\n\n\n    /*\n     * Create and return a BigNumber constructor.\n     */\n    function another(configObj) {\n        var div,\n\n            // id tracks the caller function, so its name can be included in error messages.\n            id = 0,\n            P = BigNumber.prototype,\n            ONE = new BigNumber(1),\n\n\n            /********************************* EDITABLE DEFAULTS **********************************/\n\n\n            /*\n             * The default values below must be integers within the inclusive ranges stated.\n             * The values can also be changed at run-time using BigNumber.config.\n             */\n\n            // The maximum number of decimal places for operations involving division.\n            DECIMAL_PLACES = 20,                     // 0 to MAX\n\n            /*\n             * The rounding mode used when rounding to the above decimal places, and when using\n             * toExponential, toFixed, toFormat and toPrecision, and round (default value).\n             * UP         0 Away from zero.\n             * DOWN       1 Towards zero.\n             * CEIL       2 Towards +Infinity.\n             * FLOOR      3 Towards -Infinity.\n             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n             */\n            ROUNDING_MODE = 4,                       // 0 to 8\n\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n            // The exponent value at and beneath which toString returns exponential notation.\n            // Number type: -7\n            TO_EXP_NEG = -7,                         // 0 to -MAX\n\n            // The exponent value at and above which toString returns exponential notation.\n            // Number type: 21\n            TO_EXP_POS = 21,                         // 0 to MAX\n\n            // RANGE : [MIN_EXP, MAX_EXP]\n\n            // The minimum exponent value, beneath which underflow to zero occurs.\n            // Number type: -324  (5e-324)\n            MIN_EXP = -1e7,                          // -1 to -MAX\n\n            // The maximum exponent value, above which overflow to Infinity occurs.\n            // Number type:  308  (1.7976931348623157e+308)\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n            MAX_EXP = 1e7,                           // 1 to MAX\n\n            // Whether BigNumber Errors are ever thrown.\n            ERRORS = true,                           // true or false\n\n            // Change to intValidatorNoErrors if ERRORS is false.\n            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors\n\n            // Whether to use cryptographically-secure random number generation, if available.\n            CRYPTO = false,                          // true or false\n\n            /*\n             * The modulo mode used when calculating the modulus: a mod n.\n             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n             * The remainder (r) is calculated as: r = a - n * q.\n             *\n             * UP        0 The remainder is positive if the dividend is negative, else is negative.\n             * DOWN      1 The remainder has the same sign as the dividend.\n             *             This modulo mode is commonly known as 'truncated division' and is\n             *             equivalent to (a % n) in JavaScript.\n             * FLOOR     3 The remainder has the same sign as the divisor (Python %).\n             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n             *             The remainder is always positive.\n             *\n             * The truncated division, floored division, Euclidian division and IEEE 754 remainder\n             * modes are commonly used for the modulus operation.\n             * Although the other rounding modes can also be used, they may not give useful results.\n             */\n            MODULO_MODE = 1,                         // 0 to 9\n\n            // The maximum number of significant digits of the result of the toPower operation.\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\n            POW_PRECISION = 100,                     // 0 to MAX\n\n            // The format specification used by the BigNumber.prototype.toFormat method.\n            FORMAT = {\n                decimalSeparator: '.',\n                groupSeparator: ',',\n                groupSize: 3,\n                secondaryGroupSize: 0,\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\n                fractionGroupSize: 0\n            };\n\n\n        /******************************************************************************************/\n\n\n        // CONSTRUCTOR\n\n\n        /*\n         * The BigNumber constructor and exported function.\n         * Create and return a new instance of a BigNumber object.\n         *\n         * n {number|string|BigNumber} A numeric value.\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.\n         */\n        function BigNumber( n, b ) {\n            var c, e, i, num, len, str,\n                x = this;\n\n            // Enable constructor usage without new.\n            if ( !( x instanceof BigNumber ) ) {\n\n                // 'BigNumber() constructor call without new: {n}'\n                if (ERRORS) raise( 26, 'constructor call without new', n );\n                return new BigNumber( n, b );\n            }\n\n            // 'new BigNumber() base not an integer: {b}'\n            // 'new BigNumber() base out of range: {b}'\n            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {\n\n                // Duplicate.\n                if ( n instanceof BigNumber ) {\n                    x.s = n.s;\n                    x.e = n.e;\n                    x.c = ( n = n.c ) ? n.slice() : n;\n                    id = 0;\n                    return;\n                }\n\n                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {\n                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;\n\n                    // Fast path for integers.\n                    if ( n === ~~n ) {\n                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );\n                        x.e = e;\n                        x.c = [n];\n                        id = 0;\n                        return;\n                    }\n\n                    str = n + '';\n                } else {\n                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\n                }\n            } else {\n                b = b | 0;\n                str = n + '';\n\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\n                // Allow exponential notation to be used with base 10 argument.\n                if ( b == 10 ) {\n                    x = new BigNumber( n instanceof BigNumber ? n : str );\n                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );\n                }\n\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n                // Any number in exponential form will fail due to the [Ee][+-].\n                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||\n                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +\n                    '(?:\\\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {\n                    return parseNumeric( x, str, num, b );\n                }\n\n                if (num) {\n                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;\n\n                    if ( ERRORS && str.replace( /^0\\.0*|\\./, '' ).length > 15 ) {\n\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'\n                        raise( id, tooManyDigits, n );\n                    }\n\n                    // Prevent later check for length on converted number.\n                    num = false;\n                } else {\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\n                }\n\n                str = convertBase( str, 10, b, x.s );\n            }\n\n            // Decimal point?\n            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );\n\n            // Exponential form?\n            if ( ( i = str.search( /e/i ) ) > 0 ) {\n\n                // Determine exponent.\n                if ( e < 0 ) e = i;\n                e += +str.slice( i + 1 );\n                str = str.substring( 0, i );\n            } else if ( e < 0 ) {\n\n                // Integer.\n                e = str.length;\n            }\n\n            // Determine leading zeros.\n            for ( i = 0; str.charCodeAt(i) === 48; i++ );\n\n            // Determine trailing zeros.\n            for ( len = str.length; str.charCodeAt(--len) === 48; );\n            str = str.slice( i, len + 1 );\n\n            if (str) {\n                len = str.length;\n\n                // Disallow numbers with over 15 significant digits if number type.\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'\n                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );\n\n                e = e - i - 1;\n\n                 // Overflow?\n                if ( e > MAX_EXP ) {\n\n                    // Infinity.\n                    x.c = x.e = null;\n\n                // Underflow?\n                } else if ( e < MIN_EXP ) {\n\n                    // Zero.\n                    x.c = [ x.e = 0 ];\n                } else {\n                    x.e = e;\n                    x.c = [];\n\n                    // Transform base\n\n                    // e is the base 10 exponent.\n                    // i is where to slice str to get the first element of the coefficient array.\n                    i = ( e + 1 ) % LOG_BASE;\n                    if ( e < 0 ) i += LOG_BASE;\n\n                    if ( i < len ) {\n                        if (i) x.c.push( +str.slice( 0, i ) );\n\n                        for ( len -= LOG_BASE; i < len; ) {\n                            x.c.push( +str.slice( i, i += LOG_BASE ) );\n                        }\n\n                        str = str.slice(i);\n                        i = LOG_BASE - str.length;\n                    } else {\n                        i -= len;\n                    }\n\n                    for ( ; i--; str += '0' );\n                    x.c.push( +str );\n                }\n            } else {\n\n                // Zero.\n                x.c = [ x.e = 0 ];\n            }\n\n            id = 0;\n        }\n\n\n        // CONSTRUCTOR PROPERTIES\n\n\n        BigNumber.another = another;\n\n        BigNumber.ROUND_UP = 0;\n        BigNumber.ROUND_DOWN = 1;\n        BigNumber.ROUND_CEIL = 2;\n        BigNumber.ROUND_FLOOR = 3;\n        BigNumber.ROUND_HALF_UP = 4;\n        BigNumber.ROUND_HALF_DOWN = 5;\n        BigNumber.ROUND_HALF_EVEN = 6;\n        BigNumber.ROUND_HALF_CEIL = 7;\n        BigNumber.ROUND_HALF_FLOOR = 8;\n        BigNumber.EUCLID = 9;\n\n\n        /*\n         * Configure infrequently-changing library-wide settings.\n         *\n         * Accept an object or an argument list, with one or many of the following properties or\n         * parameters respectively:\n         *\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\n         *   ERRORS          {boolean|number}   true, false, 1 or 0\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0\n         *   MODULO_MODE     {number}           0 to 9 inclusive\n         *   POW_PRECISION   {number}           0 to MAX inclusive\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat\n         *      decimalSeparator       {string}\n         *      groupSeparator         {string}\n         *      groupSize              {number}\n         *      secondaryGroupSize     {number}\n         *      fractionGroupSeparator {string}\n         *      fractionGroupSize      {number}\n         *\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\n         *\n         * E.g.\n         * BigNumber.config(20, 4) is equivalent to\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\n         *\n         * Ignore properties/parameters set to null or undefined.\n         * Return an object with the properties current values.\n         */\n        BigNumber.config = function () {\n            var v, p,\n                i = 0,\n                r = {},\n                a = arguments,\n                o = a[0],\n                has = o && typeof o == 'object'\n                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }\n                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };\n\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n            // 'config() DECIMAL_PLACES not an integer: {v}'\n            // 'config() DECIMAL_PLACES out of range: {v}'\n            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {\n                DECIMAL_PLACES = v | 0;\n            }\n            r[p] = DECIMAL_PLACES;\n\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n            // 'config() ROUNDING_MODE not an integer: {v}'\n            // 'config() ROUNDING_MODE out of range: {v}'\n            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {\n                ROUNDING_MODE = v | 0;\n            }\n            r[p] = ROUNDING_MODE;\n\n            // EXPONENTIAL_AT {number|number[]}\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n            // 'config() EXPONENTIAL_AT not an integer: {v}'\n            // 'config() EXPONENTIAL_AT out of range: {v}'\n            if ( has( p = 'EXPONENTIAL_AT' ) ) {\n\n                if ( isArray(v) ) {\n                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {\n                        TO_EXP_NEG = v[0] | 0;\n                        TO_EXP_POS = v[1] | 0;\n                    }\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\n                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );\n                }\n            }\n            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];\n\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n            // 'config() RANGE not an integer: {v}'\n            // 'config() RANGE cannot be zero: {v}'\n            // 'config() RANGE out of range: {v}'\n            if ( has( p = 'RANGE' ) ) {\n\n                if ( isArray(v) ) {\n                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {\n                        MIN_EXP = v[0] | 0;\n                        MAX_EXP = v[1] | 0;\n                    }\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\n                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );\n                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );\n                }\n            }\n            r[p] = [ MIN_EXP, MAX_EXP ];\n\n            // ERRORS {boolean|number} true, false, 1 or 0.\n            // 'config() ERRORS not a boolean or binary digit: {v}'\n            if ( has( p = 'ERRORS' ) ) {\n\n                if ( v === !!v || v === 1 || v === 0 ) {\n                    id = 0;\n                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;\n                } else if (ERRORS) {\n                    raise( 2, p + notBool, v );\n                }\n            }\n            r[p] = ERRORS;\n\n            // CRYPTO {boolean|number} true, false, 1 or 0.\n            // 'config() CRYPTO not a boolean or binary digit: {v}'\n            // 'config() crypto unavailable: {crypto}'\n            if ( has( p = 'CRYPTO' ) ) {\n\n                if ( v === !!v || v === 1 || v === 0 ) {\n                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );\n                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );\n                } else if (ERRORS) {\n                    raise( 2, p + notBool, v );\n                }\n            }\n            r[p] = CRYPTO;\n\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n            // 'config() MODULO_MODE not an integer: {v}'\n            // 'config() MODULO_MODE out of range: {v}'\n            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {\n                MODULO_MODE = v | 0;\n            }\n            r[p] = MODULO_MODE;\n\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n            // 'config() POW_PRECISION not an integer: {v}'\n            // 'config() POW_PRECISION out of range: {v}'\n            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {\n                POW_PRECISION = v | 0;\n            }\n            r[p] = POW_PRECISION;\n\n            // FORMAT {object}\n            // 'config() FORMAT not an object: {v}'\n            if ( has( p = 'FORMAT' ) ) {\n\n                if ( typeof v == 'object' ) {\n                    FORMAT = v;\n                } else if (ERRORS) {\n                    raise( 2, p + ' not an object', v );\n                }\n            }\n            r[p] = FORMAT;\n\n            return r;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the maximum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };\n\n\n        /*\n         * Return a new BigNumber whose value is the minimum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };\n\n\n        /*\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\n         * zeros are produced).\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         *\n         * 'random() decimal places not an integer: {dp}'\n         * 'random() decimal places out of range: {dp}'\n         * 'random() crypto unavailable: {crypto}'\n         */\n        BigNumber.random = (function () {\n            var pow2_53 = 0x20000000000000;\n\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n            // Check if Math.random() produces more than 32 bits of randomness.\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\n              ? function () { return mathfloor( Math.random() * pow2_53 ); }\n              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\n                  (Math.random() * 0x800000 | 0); };\n\n            return function (dp) {\n                var a, b, e, k, v,\n                    i = 0,\n                    c = [],\n                    rand = new BigNumber(ONE);\n\n                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;\n                k = mathceil( dp / LOG_BASE );\n\n                if (CRYPTO) {\n\n                    // Browsers supporting crypto.getRandomValues.\n                    if ( crypto && crypto.getRandomValues ) {\n\n                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );\n\n                        for ( ; i < k; ) {\n\n                            // 53 bits:\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n                            //                                     11111 11111111 11111111\n                            // 0x20000 is 2^21.\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n                            // Rejection sampling:\n                            // 0 <= v < 9007199254740992\n                            // Probability that v >= 9e15, is\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n                            if ( v >= 9e15 ) {\n                                b = crypto.getRandomValues( new Uint32Array(2) );\n                                a[i] = b[0];\n                                a[i + 1] = b[1];\n                            } else {\n\n                                // 0 <= v <= 8999999999999999\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push( v % 1e14 );\n                                i += 2;\n                            }\n                        }\n                        i = k / 2;\n\n                    // Node.js supporting crypto.randomBytes.\n                    } else if ( crypto && crypto.randomBytes ) {\n\n                        // buffer\n                        a = crypto.randomBytes( k *= 7 );\n\n                        for ( ; i < k; ) {\n\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n                            // 0 <= v < 9007199254740992\n                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +\n                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +\n                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];\n\n                            if ( v >= 9e15 ) {\n                                crypto.randomBytes(7).copy( a, i );\n                            } else {\n\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push( v % 1e14 );\n                                i += 7;\n                            }\n                        }\n                        i = k / 7;\n                    } else if (ERRORS) {\n                        raise( 14, 'crypto unavailable', crypto );\n                    }\n                }\n\n                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.\n                if (!i) {\n\n                    for ( ; i < k; ) {\n                        v = random53bitInt();\n                        if ( v < 9e15 ) c[i++] = v % 1e14;\n                    }\n                }\n\n                k = c[--i];\n                dp %= LOG_BASE;\n\n                // Convert trailing digits to zeros according to dp.\n                if ( k && dp ) {\n                    v = POWS_TEN[LOG_BASE - dp];\n                    c[i] = mathfloor( k / v ) * v;\n                }\n\n                // Remove trailing elements which are zero.\n                for ( ; c[i] === 0; c.pop(), i-- );\n\n                // Zero?\n                if ( i < 0 ) {\n                    c = [ e = 0 ];\n                } else {\n\n                    // Remove leading elements which are zero and adjust exponent accordingly.\n                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);\n\n                    // Count the digits of the first element of c to determine leading zeros, and...\n                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n                    // adjust the exponent accordingly.\n                    if ( i < LOG_BASE ) e -= LOG_BASE - i;\n                }\n\n                rand.e = e;\n                rand.c = c;\n                return rand;\n            };\n        })();\n\n\n        // PRIVATE FUNCTIONS\n\n\n        // Convert a numeric string of baseIn to a numeric string of baseOut.\n        function convertBase( str, baseOut, baseIn, sign ) {\n            var d, e, k, r, x, xc, y,\n                i = str.indexOf( '.' ),\n                dp = DECIMAL_PLACES,\n                rm = ROUNDING_MODE;\n\n            if ( baseIn < 37 ) str = str.toLowerCase();\n\n            // Non-integer.\n            if ( i >= 0 ) {\n                k = POW_PRECISION;\n\n                // Unlimited precision.\n                POW_PRECISION = 0;\n                str = str.replace( '.', '' );\n                y = new BigNumber(baseIn);\n                x = y.pow( str.length - i );\n                POW_PRECISION = k;\n\n                // Convert str as if an integer, then restore the fraction part by dividing the\n                // result by its base raised to a power.\n                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );\n                y.e = y.c.length;\n            }\n\n            // Convert the number as integer.\n            xc = toBaseOut( str, baseIn, baseOut );\n            e = k = xc.length;\n\n            // Remove trailing zeros.\n            for ( ; xc[--k] == 0; xc.pop() );\n            if ( !xc[0] ) return '0';\n\n            if ( i < 0 ) {\n                --e;\n            } else {\n                x.c = xc;\n                x.e = e;\n\n                // sign is needed for correct rounding.\n                x.s = sign;\n                x = div( x, y, dp, rm, baseOut );\n                xc = x.c;\n                r = x.r;\n                e = x.e;\n            }\n\n            d = e + dp + 1;\n\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\n            i = xc[d];\n            k = baseOut / 2;\n            r = r || d < 0 || xc[d + 1] != null;\n\n            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\n                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\n                         rm == ( x.s < 0 ? 8 : 7 ) );\n\n            if ( d < 1 || !xc[0] ) {\n\n                // 1^-dp or 0.\n                str = r ? toFixedPoint( '1', -dp ) : '0';\n            } else {\n                xc.length = d;\n\n                if (r) {\n\n                    // Rounding up may mean the previous digit has to be rounded up and so on.\n                    for ( --baseOut; ++xc[--d] > baseOut; ) {\n                        xc[d] = 0;\n\n                        if ( !d ) {\n                            ++e;\n                            xc.unshift(1);\n                        }\n                    }\n                }\n\n                // Determine trailing zeros.\n                for ( k = xc.length; !xc[--k]; );\n\n                // E.g. [4, 11, 15] becomes 4bf.\n                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );\n                str = toFixedPoint( str, e );\n            }\n\n            // The caller will add the sign.\n            return str;\n        }\n\n\n        // Perform division in the specified base. Called by div and convertBase.\n        div = (function () {\n\n            // Assume non-zero x and k.\n            function multiply( x, k, base ) {\n                var m, temp, xlo, xhi,\n                    carry = 0,\n                    i = x.length,\n                    klo = k % SQRT_BASE,\n                    khi = k / SQRT_BASE | 0;\n\n                for ( x = x.slice(); i--; ) {\n                    xlo = x[i] % SQRT_BASE;\n                    xhi = x[i] / SQRT_BASE | 0;\n                    m = khi * xlo + xhi * klo;\n                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;\n                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;\n                    x[i] = temp % base;\n                }\n\n                if (carry) x.unshift(carry);\n\n                return x;\n            }\n\n            function compare( a, b, aL, bL ) {\n                var i, cmp;\n\n                if ( aL != bL ) {\n                    cmp = aL > bL ? 1 : -1;\n                } else {\n\n                    for ( i = cmp = 0; i < aL; i++ ) {\n\n                        if ( a[i] != b[i] ) {\n                            cmp = a[i] > b[i] ? 1 : -1;\n                            break;\n                        }\n                    }\n                }\n                return cmp;\n            }\n\n            function subtract( a, b, aL, base ) {\n                var i = 0;\n\n                // Subtract b from a.\n                for ( ; aL--; ) {\n                    a[aL] -= i;\n                    i = a[aL] < b[aL] ? 1 : 0;\n                    a[aL] = i * base + a[aL] - b[aL];\n                }\n\n                // Remove leading zeros.\n                for ( ; !a[0] && a.length > 1; a.shift() );\n            }\n\n            // x: dividend, y: divisor.\n            return function ( x, y, dp, rm, base ) {\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\n                    yL, yz,\n                    s = x.s == y.s ? 1 : -1,\n                    xc = x.c,\n                    yc = y.c;\n\n                // Either NaN, Infinity or 0?\n                if ( !xc || !xc[0] || !yc || !yc[0] ) {\n\n                    return new BigNumber(\n\n                      // Return NaN if either NaN, or both Infinity or 0.\n                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :\n\n                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0\n                    );\n                }\n\n                q = new BigNumber(s);\n                qc = q.c = [];\n                e = x.e - y.e;\n                s = dp + e + 1;\n\n                if ( !base ) {\n                    base = BASE;\n                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );\n                    s = s / LOG_BASE | 0;\n                }\n\n                // Result exponent may be one less then the current value of e.\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );\n                if ( yc[i] > ( xc[i] || 0 ) ) e--;\n\n                if ( s < 0 ) {\n                    qc.push(1);\n                    more = true;\n                } else {\n                    xL = xc.length;\n                    yL = yc.length;\n                    i = 0;\n                    s += 2;\n\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n                    n = mathfloor( base / ( yc[0] + 1 ) );\n\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\n                    if ( n > 1 ) {\n                        yc = multiply( yc, n, base );\n                        xc = multiply( xc, n, base );\n                        yL = yc.length;\n                        xL = xc.length;\n                    }\n\n                    xi = yL;\n                    rem = xc.slice( 0, yL );\n                    remL = rem.length;\n\n                    // Add zeros to make remainder as long as divisor.\n                    for ( ; remL < yL; rem[remL++] = 0 );\n                    yz = yc.slice();\n                    yz.unshift(0);\n                    yc0 = yc[0];\n                    if ( yc[1] >= base / 2 ) yc0++;\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\n\n                    do {\n                        n = 0;\n\n                        // Compare divisor and remainder.\n                        cmp = compare( yc, rem, yL, remL );\n\n                        // If divisor < remainder.\n                        if ( cmp < 0 ) {\n\n                            // Calculate trial digit, n.\n\n                            rem0 = rem[0];\n                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );\n\n                            // n is how many times the divisor goes into the current remainder.\n                            n = mathfloor( rem0 / yc0 );\n\n                            //  Algorithm:\n                            //  1. product = divisor * trial digit (n)\n                            //  2. if product > remainder: product -= divisor, n--\n                            //  3. remainder -= product\n                            //  4. if product was < remainder at 2:\n                            //    5. compare new remainder and divisor\n                            //    6. If remainder > divisor: remainder -= divisor, n++\n\n                            if ( n > 1 ) {\n\n                                // n may be > base only when base is 3.\n                                if (n >= base) n = base - 1;\n\n                                // product = divisor * trial digit.\n                                prod = multiply( yc, n, base );\n                                prodL = prod.length;\n                                remL = rem.length;\n\n                                // Compare product and remainder.\n                                // If product > remainder.\n                                // Trial digit n too high.\n                                // n is 1 too high about 5% of the time, and is not known to have\n                                // ever been more than 1 too high.\n                                while ( compare( prod, rem, prodL, remL ) == 1 ) {\n                                    n--;\n\n                                    // Subtract divisor from product.\n                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );\n                                    prodL = prod.length;\n                                    cmp = 1;\n                                }\n                            } else {\n\n                                // n is 0 or 1, cmp is -1.\n                                // If n is 0, there is no need to compare yc and rem again below,\n                                // so change cmp to 1 to avoid it.\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                                if ( n == 0 ) {\n\n                                    // divisor < remainder, so n must be at least 1.\n                                    cmp = n = 1;\n                                }\n\n                                // product = divisor\n                                prod = yc.slice();\n                                prodL = prod.length;\n                            }\n\n                            if ( prodL < remL ) prod.unshift(0);\n\n                            // Subtract product from remainder.\n                            subtract( rem, prod, remL, base );\n                            remL = rem.length;\n\n                             // If product was < remainder.\n                            if ( cmp == -1 ) {\n\n                                // Compare divisor and new remainder.\n                                // If divisor < new remainder, subtract divisor from remainder.\n                                // Trial digit n too low.\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                                while ( compare( yc, rem, yL, remL ) < 1 ) {\n                                    n++;\n\n                                    // Subtract divisor from remainder.\n                                    subtract( rem, yL < remL ? yz : yc, remL, base );\n                                    remL = rem.length;\n                                }\n                            }\n                        } else if ( cmp === 0 ) {\n                            n++;\n                            rem = [0];\n                        } // else cmp === 1 and n will be 0\n\n                        // Add the next digit, n, to the result array.\n                        qc[i++] = n;\n\n                        // Update the remainder.\n                        if ( rem[0] ) {\n                            rem[remL++] = xc[xi] || 0;\n                        } else {\n                            rem = [ xc[xi] ];\n                            remL = 1;\n                        }\n                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );\n\n                    more = rem[0] != null;\n\n                    // Leading zero?\n                    if ( !qc[0] ) qc.shift();\n                }\n\n                if ( base == BASE ) {\n\n                    // To calculate q.e, first get the number of digits of qc[0].\n                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );\n                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );\n\n                // Caller is convertBase.\n                } else {\n                    q.e = e;\n                    q.r = +more;\n                }\n\n                return q;\n            };\n        })();\n\n\n        /*\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\n         * notation rounded to the specified decimal places or significant digits.\n         *\n         * n is a BigNumber.\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).\n         * rm is the rounding mode.\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\n         */\n        function format( n, i, rm, caller ) {\n            var c0, e, ne, len, str;\n\n            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )\n              ? rm | 0 : ROUNDING_MODE;\n\n            if ( !n.c ) return n.toString();\n            c0 = n.c[0];\n            ne = n.e;\n\n            if ( i == null ) {\n                str = coeffToString( n.c );\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG\n                  ? toExponential( str, ne )\n                  : toFixedPoint( str, ne );\n            } else {\n                n = round( new BigNumber(n), i, rm );\n\n                // n.e may have changed if the value was rounded up.\n                e = n.e;\n\n                str = coeffToString( n.c );\n                len = str.length;\n\n                // toPrecision returns exponential notation if the number of significant digits\n                // specified is less than the number of digits necessary to represent the integer\n                // part of the value in fixed-point notation.\n\n                // Exponential notation.\n                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {\n\n                    // Append zeros?\n                    for ( ; len < i; str += '0', len++ );\n                    str = toExponential( str, e );\n\n                // Fixed-point notation.\n                } else {\n                    i -= ne;\n                    str = toFixedPoint( str, e );\n\n                    // Append zeros?\n                    if ( e + 1 > len ) {\n                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );\n                    } else {\n                        i += e - len;\n                        if ( i > 0 ) {\n                            if ( e + 1 == len ) str += '.';\n                            for ( ; i--; str += '0' );\n                        }\n                    }\n                }\n            }\n\n            return n.s < 0 && c0 ? '-' + str : str;\n        }\n\n\n        // Handle BigNumber.max and BigNumber.min.\n        function maxOrMin( args, method ) {\n            var m, n,\n                i = 0;\n\n            if ( isArray( args[0] ) ) args = args[0];\n            m = new BigNumber( args[0] );\n\n            for ( ; ++i < args.length; ) {\n                n = new BigNumber( args[i] );\n\n                // If any number is NaN, return NaN.\n                if ( !n.s ) {\n                    m = n;\n                    break;\n                } else if ( method.call( m, n ) ) {\n                    m = n;\n                }\n            }\n\n            return m;\n        }\n\n\n        /*\n         * Return true if n is an integer in range, otherwise throw.\n         * Use for argument validation when ERRORS is true.\n         */\n        function intValidatorWithErrors( n, min, max, caller, name ) {\n            if ( n < min || n > max || n != truncate(n) ) {\n                raise( caller, ( name || 'decimal places' ) +\n                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );\n            }\n\n            return true;\n        }\n\n\n        /*\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\n         * Called by minus, plus and times.\n         */\n        function normalise( n, c, e ) {\n            var i = 1,\n                j = c.length;\n\n             // Remove trailing zeros.\n            for ( ; !c[--j]; c.pop() );\n\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\n            for ( j = c[0]; j >= 10; j /= 10, i++ );\n\n            // Overflow?\n            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {\n\n                // Infinity.\n                n.c = n.e = null;\n\n            // Underflow?\n            } else if ( e < MIN_EXP ) {\n\n                // Zero.\n                n.c = [ n.e = 0 ];\n            } else {\n                n.e = e;\n                n.c = c;\n            }\n\n            return n;\n        }\n\n\n        // Handle values that fail the validity test in BigNumber.\n        parseNumeric = (function () {\n            var basePrefix = /^(-?)0([xbo])/i,\n                dotAfter = /^([^.]+)\\.$/,\n                dotBefore = /^\\.([^.]+)$/,\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n                whitespaceOrPlus = /^\\s*\\+|^\\s+|\\s+$/g;\n\n            return function ( x, str, num, b ) {\n                var base,\n                    s = num ? str : str.replace( whitespaceOrPlus, '' );\n\n                // No exception on ±Infinity or NaN.\n                if ( isInfinityOrNaN.test(s) ) {\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n                } else {\n                    if ( !num ) {\n\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n                        s = s.replace( basePrefix, function ( m, p1, p2 ) {\n                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n                            return !b || b == base ? p1 : m;\n                        });\n\n                        if (b) {\n                            base = b;\n\n                            // E.g. '1.' to '1', '.1' to '0.1'\n                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );\n                        }\n\n                        if ( str != s ) return new BigNumber( s, base );\n                    }\n\n                    // 'new BigNumber() not a number: {n}'\n                    // 'new BigNumber() not a base {b} number: {n}'\n                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );\n                    x.s = null;\n                }\n\n                x.c = x.e = null;\n                id = 0;\n            }\n        })();\n\n\n        // Throw a BigNumber Error.\n        function raise( caller, msg, val ) {\n            var error = new Error( [\n                'new BigNumber',     // 0\n                'cmp',               // 1\n                'config',            // 2\n                'div',               // 3\n                'divToInt',          // 4\n                'eq',                // 5\n                'gt',                // 6\n                'gte',               // 7\n                'lt',                // 8\n                'lte',               // 9\n                'minus',             // 10\n                'mod',               // 11\n                'plus',              // 12\n                'precision',         // 13\n                'random',            // 14\n                'round',             // 15\n                'shift',             // 16\n                'times',             // 17\n                'toDigits',          // 18\n                'toExponential',     // 19\n                'toFixed',           // 20\n                'toFormat',          // 21\n                'toFraction',        // 22\n                'pow',               // 23\n                'toPrecision',       // 24\n                'toString',          // 25\n                'BigNumber'          // 26\n            ][caller] + '() ' + msg + ': ' + val );\n\n            error.name = 'BigNumber Error';\n            id = 0;\n            throw error;\n        }\n\n\n        /*\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\n         * If r is truthy, it is known that there are more digits after the rounding digit.\n         */\n        function round( x, sd, rm, r ) {\n            var d, i, j, k, n, ni, rd,\n                xc = x.c,\n                pows10 = POWS_TEN;\n\n            // if x is not Infinity or NaN...\n            if (xc) {\n\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\n                // ni is the index of n within x.c.\n                // d is the number of digits of n.\n                // i is the index of rd within n including leading zeros.\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\n                out: {\n\n                    // Get the number of digits of the first element of xc.\n                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );\n                    i = sd - d;\n\n                    // If the rounding digit is in the first element of xc...\n                    if ( i < 0 ) {\n                        i += LOG_BASE;\n                        j = sd;\n                        n = xc[ ni = 0 ];\n\n                        // Get the rounding digit at index j of n.\n                        rd = n / pows10[ d - j - 1 ] % 10 | 0;\n                    } else {\n                        ni = mathceil( ( i + 1 ) / LOG_BASE );\n\n                        if ( ni >= xc.length ) {\n\n                            if (r) {\n\n                                // Needed by sqrt.\n                                for ( ; xc.length <= ni; xc.push(0) );\n                                n = rd = 0;\n                                d = 1;\n                                i %= LOG_BASE;\n                                j = i - LOG_BASE + 1;\n                            } else {\n                                break out;\n                            }\n                        } else {\n                            n = k = xc[ni];\n\n                            // Get the number of digits of n.\n                            for ( d = 1; k >= 10; k /= 10, d++ );\n\n                            // Get the index of rd within n.\n                            i %= LOG_BASE;\n\n                            // Get the index of rd within n, adjusted for leading zeros.\n                            // The number of leading zeros of n is given by LOG_BASE - d.\n                            j = i - LOG_BASE + d;\n\n                            // Get the rounding digit at index j of n.\n                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;\n                        }\n                    }\n\n                    r = r || sd < 0 ||\n\n                    // Are there any non-zero digits after the rounding digit?\n                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\n                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );\n\n                    r = rm < 4\n                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\n                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&\n\n                        // Check whether the digit to the left of the rounding digit is odd.\n                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||\n                          rm == ( x.s < 0 ? 8 : 7 ) );\n\n                    if ( sd < 1 || !xc[0] ) {\n                        xc.length = 0;\n\n                        if (r) {\n\n                            // Convert sd to decimal places.\n                            sd -= x.e + 1;\n\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                            xc[0] = pows10[ sd % LOG_BASE ];\n                            x.e = -sd || 0;\n                        } else {\n\n                            // Zero.\n                            xc[0] = x.e = 0;\n                        }\n\n                        return x;\n                    }\n\n                    // Remove excess digits.\n                    if ( i == 0 ) {\n                        xc.length = ni;\n                        k = 1;\n                        ni--;\n                    } else {\n                        xc.length = ni + 1;\n                        k = pows10[ LOG_BASE - i ];\n\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n                        // j > 0 means i > number of leading zeros of n.\n                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;\n                    }\n\n                    // Round up?\n                    if (r) {\n\n                        for ( ; ; ) {\n\n                            // If the digit to be rounded up is in the first element of xc...\n                            if ( ni == 0 ) {\n\n                                // i will be the length of xc[0] before k is added.\n                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );\n                                j = xc[0] += k;\n                                for ( k = 1; j >= 10; j /= 10, k++ );\n\n                                // if i != k the length has increased.\n                                if ( i != k ) {\n                                    x.e++;\n                                    if ( xc[0] == BASE ) xc[0] = 1;\n                                }\n\n                                break;\n                            } else {\n                                xc[ni] += k;\n                                if ( xc[ni] != BASE ) break;\n                                xc[ni--] = 0;\n                                k = 1;\n                            }\n                        }\n                    }\n\n                    // Remove trailing zeros.\n                    for ( i = xc.length; xc[--i] === 0; xc.pop() );\n                }\n\n                // Overflow? Infinity.\n                if ( x.e > MAX_EXP ) {\n                    x.c = x.e = null;\n\n                // Underflow? Zero.\n                } else if ( x.e < MIN_EXP ) {\n                    x.c = [ x.e = 0 ];\n                }\n            }\n\n            return x;\n        }\n\n\n        // PROTOTYPE/INSTANCE METHODS\n\n\n        /*\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\n         */\n        P.absoluteValue = P.abs = function () {\n            var x = new BigNumber(this);\n            if ( x.s < 0 ) x.s = 1;\n            return x;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\n         * number in the direction of Infinity.\n         */\n        P.ceil = function () {\n            return round( new BigNumber(this), this.e + 1, 2 );\n        };\n\n\n        /*\n         * Return\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\n         * 0 if they have the same value,\n         * or null if the value of either is NaN.\n         */\n        P.comparedTo = P.cmp = function ( y, b ) {\n            id = 1;\n            return compare( this, new BigNumber( y, b ) );\n        };\n\n\n        /*\n         * Return the number of decimal places of the value of this BigNumber, or null if the value\n         * of this BigNumber is ±Infinity or NaN.\n         */\n        P.decimalPlaces = P.dp = function () {\n            var n, v,\n                c = this.c;\n\n            if ( !c ) return null;\n            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;\n\n            // Subtract the number of trailing zeros of the last number.\n            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );\n            if ( n < 0 ) n = 0;\n\n            return n;\n        };\n\n\n        /*\n         *  n / 0 = I\n         *  n / N = N\n         *  n / I = 0\n         *  0 / n = 0\n         *  0 / 0 = N\n         *  0 / N = N\n         *  0 / I = 0\n         *  N / n = N\n         *  N / 0 = N\n         *  N / N = N\n         *  N / I = N\n         *  I / n = I\n         *  I / 0 = I\n         *  I / N = N\n         *  I / I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.dividedBy = P.div = function ( y, b ) {\n            id = 3;\n            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\n         * BigNumber by the value of BigNumber(y, b).\n         */\n        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {\n            id = 4;\n            return div( this, new BigNumber( y, b ), 0, 1 );\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\n         * otherwise returns false.\n         */\n        P.equals = P.eq = function ( y, b ) {\n            id = 5;\n            return compare( this, new BigNumber( y, b ) ) === 0;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\n         * number in the direction of -Infinity.\n         */\n        P.floor = function () {\n            return round( new BigNumber(this), this.e + 1, 3 );\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         * otherwise returns false.\n         */\n        P.greaterThan = P.gt = function ( y, b ) {\n            id = 6;\n            return compare( this, new BigNumber( y, b ) ) > 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than or equal to the value of\n         * BigNumber(y, b), otherwise returns false.\n         */\n        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {\n            id = 7;\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;\n\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.\n         */\n        P.isFinite = function () {\n            return !!this.c;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\n         */\n        P.isInteger = P.isInt = function () {\n            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.\n         */\n        P.isNaN = function () {\n            return !this.s;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is negative, otherwise returns false.\n         */\n        P.isNegative = P.isNeg = function () {\n            return this.s < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\n         */\n        P.isZero = function () {\n            return !!this.c && this.c[0] == 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\n         * otherwise returns false.\n         */\n        P.lessThan = P.lt = function ( y, b ) {\n            id = 8;\n            return compare( this, new BigNumber( y, b ) ) < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than or equal to the value of\n         * BigNumber(y, b), otherwise returns false.\n         */\n        P.lessThanOrEqualTo = P.lte = function ( y, b ) {\n            id = 9;\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;\n        };\n\n\n        /*\n         *  n - 0 = n\n         *  n - N = N\n         *  n - I = -I\n         *  0 - n = -n\n         *  0 - 0 = 0\n         *  0 - N = N\n         *  0 - I = -I\n         *  N - n = N\n         *  N - 0 = N\n         *  N - N = N\n         *  N - I = N\n         *  I - n = I\n         *  I - 0 = I\n         *  I - N = N\n         *  I - I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\n         * BigNumber(y, b).\n         */\n        P.minus = P.sub = function ( y, b ) {\n            var i, j, t, xLTy,\n                x = this,\n                a = x.s;\n\n            id = 10;\n            y = new BigNumber( y, b );\n            b = y.s;\n\n            // Either NaN?\n            if ( !a || !b ) return new BigNumber(NaN);\n\n            // Signs differ?\n            if ( a != b ) {\n                y.s = -b;\n                return x.plus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if ( !xe || !ye ) {\n\n                // Either Infinity?\n                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );\n\n                // Either zero?\n                if ( !xc[0] || !yc[0] ) {\n\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :\n\n                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n                      ROUNDING_MODE == 3 ? -0 : 0 );\n                }\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Determine which is the bigger number.\n            if ( a = xe - ye ) {\n\n                if ( xLTy = a < 0 ) {\n                    a = -a;\n                    t = xc;\n                } else {\n                    ye = xe;\n                    t = yc;\n                }\n\n                t.reverse();\n\n                // Prepend zeros to equalise exponents.\n                for ( b = a; b--; t.push(0) );\n                t.reverse();\n            } else {\n\n                // Exponents equal. Check digit by digit.\n                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;\n\n                for ( a = b = 0; b < j; b++ ) {\n\n                    if ( xc[b] != yc[b] ) {\n                        xLTy = xc[b] < yc[b];\n                        break;\n                    }\n                }\n            }\n\n            // x < y? Point xc to the array of the bigger number.\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n\n            b = ( j = yc.length ) - ( i = xc.length );\n\n            // Append zeros to xc if shorter.\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );\n            b = BASE - 1;\n\n            // Subtract yc from xc.\n            for ( ; j > a; ) {\n\n                if ( xc[--j] < yc[j] ) {\n                    for ( i = j; i && !xc[--i]; xc[i] = b );\n                    --xc[i];\n                    xc[j] += BASE;\n                }\n\n                xc[j] -= yc[j];\n            }\n\n            // Remove leading zeros and adjust exponent accordingly.\n            for ( ; xc[0] == 0; xc.shift(), --ye );\n\n            // Zero?\n            if ( !xc[0] ) {\n\n                // Following IEEE 754 (2008) 6.3,\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\n                y.c = [ y.e = 0 ];\n                return y;\n            }\n\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n            // for finite x and y.\n            return normalise( y, xc, ye );\n        };\n\n\n        /*\n         *   n % 0 =  N\n         *   n % N =  N\n         *   n % I =  n\n         *   0 % n =  0\n         *  -0 % n = -0\n         *   0 % 0 =  N\n         *   0 % N =  N\n         *   0 % I =  0\n         *   N % n =  N\n         *   N % 0 =  N\n         *   N % N =  N\n         *   N % I =  N\n         *   I % n =  N\n         *   I % 0 =  N\n         *   I % N =  N\n         *   I % I =  N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\n         */\n        P.modulo = P.mod = function ( y, b ) {\n            var q, s,\n                x = this;\n\n            id = 11;\n            y = new BigNumber( y, b );\n\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n            if ( !x.c || !y.s || y.c && !y.c[0] ) {\n                return new BigNumber(NaN);\n\n            // Return x if y is Infinity or x is zero.\n            } else if ( !y.c || x.c && !x.c[0] ) {\n                return new BigNumber(x);\n            }\n\n            if ( MODULO_MODE == 9 ) {\n\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\n                // r = x - qy    where  0 <= r < abs(y)\n                s = y.s;\n                y.s = 1;\n                q = div( x, y, 0, 3 );\n                y.s = s;\n                q.s *= s;\n            } else {\n                q = div( x, y, 0, MODULO_MODE );\n            }\n\n            return x.minus( q.times(y) );\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\n         * i.e. multiplied by -1.\n         */\n        P.negated = P.neg = function () {\n            var x = new BigNumber(this);\n            x.s = -x.s || null;\n            return x;\n        };\n\n\n        /*\n         *  n + 0 = n\n         *  n + N = N\n         *  n + I = I\n         *  0 + n = n\n         *  0 + 0 = 0\n         *  0 + N = N\n         *  0 + I = I\n         *  N + n = N\n         *  N + 0 = N\n         *  N + N = N\n         *  N + I = N\n         *  I + n = I\n         *  I + 0 = I\n         *  I + N = N\n         *  I + I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\n         * BigNumber(y, b).\n         */\n        P.plus = P.add = function ( y, b ) {\n            var t,\n                x = this,\n                a = x.s;\n\n            id = 12;\n            y = new BigNumber( y, b );\n            b = y.s;\n\n            // Either NaN?\n            if ( !a || !b ) return new BigNumber(NaN);\n\n            // Signs differ?\n             if ( a != b ) {\n                y.s = -b;\n                return x.minus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if ( !xe || !ye ) {\n\n                // Return ±Infinity if either ±Infinity.\n                if ( !xc || !yc ) return new BigNumber( a / 0 );\n\n                // Either zero?\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n            if ( a = xe - ye ) {\n                if ( a > 0 ) {\n                    ye = xe;\n                    t = yc;\n                } else {\n                    a = -a;\n                    t = xc;\n                }\n\n                t.reverse();\n                for ( ; a--; t.push(0) );\n                t.reverse();\n            }\n\n            a = xc.length;\n            b = yc.length;\n\n            // Point xc to the longer array, and b to the shorter length.\n            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;\n\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n            for ( a = 0; b; ) {\n                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;\n                xc[b] %= BASE;\n            }\n\n            if (a) {\n                xc.unshift(a);\n                ++ye;\n            }\n\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n            // ye = MAX_EXP + 1 possible\n            return normalise( y, xc, ye );\n        };\n\n\n        /*\n         * Return the number of significant digits of the value of this BigNumber.\n         *\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\n         */\n        P.precision = P.sd = function (z) {\n            var n, v,\n                x = this,\n                c = x.c;\n\n            // 'precision() argument not a boolean or binary digit: {z}'\n            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {\n                if (ERRORS) raise( 13, 'argument' + notBool, z );\n                if ( z != !!z ) z = null;\n            }\n\n            if ( !c ) return null;\n            v = c.length - 1;\n            n = v * LOG_BASE + 1;\n\n            if ( v = c[v] ) {\n\n                // Subtract the number of trailing zeros of the last element.\n                for ( ; v % 10 == 0; v /= 10, n-- );\n\n                // Add the number of digits of the first element.\n                for ( v = c[0]; v >= 10; v /= 10, n++ );\n            }\n\n            if ( z && x.e + 1 > n ) n = x.e + 1;\n\n            return n;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\n         * omitted.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'round() decimal places out of range: {dp}'\n         * 'round() decimal places not an integer: {dp}'\n         * 'round() rounding mode not an integer: {rm}'\n         * 'round() rounding mode out of range: {rm}'\n         */\n        P.round = function ( dp, rm ) {\n            var n = new BigNumber(this);\n\n            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {\n                round( n, ~~dp + this.e + 1, rm == null ||\n                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );\n            }\n\n            return n;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\n         *\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\n         *\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\n         * otherwise.\n         *\n         * 'shift() argument not an integer: {k}'\n         * 'shift() argument out of range: {k}'\n         */\n        P.shift = function (k) {\n            var n = this;\n            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )\n\n              // k < 1e+21, or truncate(k) will produce exponential notation.\n              ? n.times( '1e' + truncate(k) )\n              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )\n                ? n.s * ( k < 0 ? 0 : 1 / 0 )\n                : n );\n        };\n\n\n        /*\n         *  sqrt(-n) =  N\n         *  sqrt( N) =  N\n         *  sqrt(-I) =  N\n         *  sqrt( I) =  I\n         *  sqrt( 0) =  0\n         *  sqrt(-0) = -0\n         *\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.squareRoot = P.sqrt = function () {\n            var m, n, r, rep, t,\n                x = this,\n                c = x.c,\n                s = x.s,\n                e = x.e,\n                dp = DECIMAL_PLACES + 4,\n                half = new BigNumber('0.5');\n\n            // Negative/NaN/Infinity/zero?\n            if ( s !== 1 || !c || !c[0] ) {\n                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );\n            }\n\n            // Initial estimate.\n            s = Math.sqrt( +x );\n\n            // Math.sqrt underflow/overflow?\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n            if ( s == 0 || s == 1 / 0 ) {\n                n = coeffToString(c);\n                if ( ( n.length + e ) % 2 == 0 ) n += '0';\n                s = Math.sqrt(n);\n                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );\n\n                if ( s == 1 / 0 ) {\n                    n = '1e' + e;\n                } else {\n                    n = s.toExponential();\n                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;\n                }\n\n                r = new BigNumber(n);\n            } else {\n                r = new BigNumber( s + '' );\n            }\n\n            // Check for zero.\n            // r could be zero if MIN_EXP is changed after the this value was created.\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n            // coeffToString to throw.\n            if ( r.c[0] ) {\n                e = r.e;\n                s = e + dp;\n                if ( s < 3 ) s = 0;\n\n                // Newton-Raphson iteration.\n                for ( ; ; ) {\n                    t = r;\n                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );\n\n                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =\n                         coeffToString( r.c ) ).slice( 0, s ) ) {\n\n                        // The exponent of r may here be one less than the final result exponent,\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n                        // are indexed correctly.\n                        if ( r.e < e ) --s;\n                        n = n.slice( s - 3, s + 1 );\n\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n                        // iteration.\n                        if ( n == '9999' || !rep && n == '4999' ) {\n\n                            // On the first iteration only, check to see if rounding up gives the\n                            // exact result as the nines may infinitely repeat.\n                            if ( !rep ) {\n                                round( t, t.e + DECIMAL_PLACES + 2, 0 );\n\n                                if ( t.times(t).eq(x) ) {\n                                    r = t;\n                                    break;\n                                }\n                            }\n\n                            dp += 4;\n                            s += 4;\n                            rep = 1;\n                        } else {\n\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n                            // result. If not, then there are further digits and m will be truthy.\n                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {\n\n                                // Truncate to the first rounding digit.\n                                round( r, r.e + DECIMAL_PLACES + 2, 1 );\n                                m = !r.times(r).eq(x);\n                            }\n\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );\n        };\n\n\n        /*\n         *  n * 0 = 0\n         *  n * N = N\n         *  n * I = I\n         *  0 * n = 0\n         *  0 * 0 = 0\n         *  0 * N = N\n         *  0 * I = N\n         *  N * n = N\n         *  N * 0 = N\n         *  N * N = N\n         *  N * I = N\n         *  I * n = I\n         *  I * 0 = N\n         *  I * N = N\n         *  I * I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of\n         * BigNumber(y, b).\n         */\n        P.times = P.mul = function ( y, b ) {\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\n                base, sqrtBase,\n                x = this,\n                xc = x.c,\n                yc = ( id = 17, y = new BigNumber( y, b ) ).c;\n\n            // Either NaN, ±Infinity or ±0?\n            if ( !xc || !yc || !xc[0] || !yc[0] ) {\n\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {\n                    y.c = y.e = y.s = null;\n                } else {\n                    y.s *= x.s;\n\n                    // Return ±Infinity if either is ±Infinity.\n                    if ( !xc || !yc ) {\n                        y.c = y.e = null;\n\n                    // Return ±0 if either is ±0.\n                    } else {\n                        y.c = [0];\n                        y.e = 0;\n                    }\n                }\n\n                return y;\n            }\n\n            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );\n            y.s *= x.s;\n            xcL = xc.length;\n            ycL = yc.length;\n\n            // Ensure xc points to longer array and xcL to its length.\n            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\n\n            // Initialise the result array with zeros.\n            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );\n\n            base = BASE;\n            sqrtBase = SQRT_BASE;\n\n            for ( i = ycL; --i >= 0; ) {\n                c = 0;\n                ylo = yc[i] % sqrtBase;\n                yhi = yc[i] / sqrtBase | 0;\n\n                for ( k = xcL, j = i + k; j > i; ) {\n                    xlo = xc[--k] % sqrtBase;\n                    xhi = xc[k] / sqrtBase | 0;\n                    m = yhi * xlo + xhi * ylo;\n                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;\n                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;\n                    zc[j--] = xlo % base;\n                }\n\n                zc[j] = c;\n            }\n\n            if (c) {\n                ++e;\n            } else {\n                zc.shift();\n            }\n\n            return normalise( y, zc, e );\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toDigits() precision out of range: {sd}'\n         * 'toDigits() precision not an integer: {sd}'\n         * 'toDigits() rounding mode not an integer: {rm}'\n         * 'toDigits() rounding mode out of range: {rm}'\n         */\n        P.toDigits = function ( sd, rm ) {\n            var n = new BigNumber(this);\n            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;\n            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;\n            return sd ? round( n, sd, rm ) : n;\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in exponential notation and\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toExponential() decimal places not an integer: {dp}'\n         * 'toExponential() decimal places out of range: {dp}'\n         * 'toExponential() rounding mode not an integer: {rm}'\n         * 'toExponential() rounding mode out of range: {rm}'\n         */\n        P.toExponential = function ( dp, rm ) {\n            return format( this,\n              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toFixed() decimal places not an integer: {dp}'\n         * 'toFixed() decimal places out of range: {dp}'\n         * 'toFixed() rounding mode not an integer: {rm}'\n         * 'toFixed() rounding mode out of range: {rm}'\n         */\n        P.toFixed = function ( dp, rm ) {\n            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )\n              ? ~~dp + this.e + 1 : null, rm, 20 );\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\n         * of the FORMAT object (see BigNumber.config).\n         *\n         * FORMAT = {\n         *      decimalSeparator : '.',\n         *      groupSeparator : ',',\n         *      groupSize : 3,\n         *      secondaryGroupSize : 0,\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\n         *      fractionGroupSize : 0\n         * };\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toFormat() decimal places not an integer: {dp}'\n         * 'toFormat() decimal places out of range: {dp}'\n         * 'toFormat() rounding mode not an integer: {rm}'\n         * 'toFormat() rounding mode out of range: {rm}'\n         */\n        P.toFormat = function ( dp, rm ) {\n            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )\n              ? ~~dp + this.e + 1 : null, rm, 21 );\n\n            if ( this.c ) {\n                var i,\n                    arr = str.split('.'),\n                    g1 = +FORMAT.groupSize,\n                    g2 = +FORMAT.secondaryGroupSize,\n                    groupSeparator = FORMAT.groupSeparator,\n                    intPart = arr[0],\n                    fractionPart = arr[1],\n                    isNeg = this.s < 0,\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\n                    len = intDigits.length;\n\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n                if ( g1 > 0 && len > 0 ) {\n                    i = len % g1 || g1;\n                    intPart = intDigits.substr( 0, i );\n\n                    for ( ; i < len; i += g1 ) {\n                        intPart += groupSeparator + intDigits.substr( i, g1 );\n                    }\n\n                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);\n                    if (isNeg) intPart = '-' + intPart;\n                }\n\n                str = fractionPart\n                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )\n                    ? fractionPart.replace( new RegExp( '\\\\d{' + g2 + '}\\\\B', 'g' ),\n                      '$&' + FORMAT.fractionGroupSeparator )\n                    : fractionPart )\n                  : intPart;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return a string array representing the value of this BigNumber as a simple fraction with\n         * an integer numerator and an integer denominator. The denominator will be a positive\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\n         * denominator is not specified, the denominator will be the lowest value necessary to\n         * represent the number exactly.\n         *\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\n         *\n         * 'toFraction() max denominator not an integer: {md}'\n         * 'toFraction() max denominator out of range: {md}'\n         */\n        P.toFraction = function (md) {\n            var arr, d0, d2, e, exp, n, n0, q, s,\n                k = ERRORS,\n                x = this,\n                xc = x.c,\n                d = new BigNumber(ONE),\n                n1 = d0 = new BigNumber(ONE),\n                d1 = n0 = new BigNumber(ONE);\n\n            if ( md != null ) {\n                ERRORS = false;\n                n = new BigNumber(md);\n                ERRORS = k;\n\n                if ( !( k = n.isInt() ) || n.lt(ONE) ) {\n\n                    if (ERRORS) {\n                        raise( 22,\n                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );\n                    }\n\n                    // ERRORS is false:\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.\n                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;\n                }\n            }\n\n            if ( !xc ) return x.toString();\n            s = coeffToString(xc);\n\n            // Determine initial denominator.\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n            e = d.e = s.length - x.e - 1;\n            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];\n            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;\n\n            exp = MAX_EXP;\n            MAX_EXP = 1 / 0;\n            n = new BigNumber(s);\n\n            // n0 = d1 = 0\n            n0.c[0] = 0;\n\n            for ( ; ; )  {\n                q = div( n, d, 0, 1 );\n                d2 = d0.plus( q.times(d1) );\n                if ( d2.cmp(md) == 1 ) break;\n                d0 = d1;\n                d1 = d2;\n                n1 = n0.plus( q.times( d2 = n1 ) );\n                n0 = d2;\n                d = n.minus( q.times( d2 = d ) );\n                n = d2;\n            }\n\n            d2 = div( md.minus(d0), d1, 0, 1 );\n            n0 = n0.plus( d2.times(n1) );\n            d0 = d0.plus( d2.times(d1) );\n            n0.s = n1.s = x.s;\n            e *= 2;\n\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\n            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(\n                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1\n                    ? [ n1.toString(), d1.toString() ]\n                    : [ n0.toString(), d0.toString() ];\n\n            MAX_EXP = exp;\n            return arr;\n        };\n\n\n        /*\n         * Return the value of this BigNumber converted to a number primitive.\n         */\n        P.toNumber = function () {\n            var x = this;\n\n            // Ensure zero has correct sign.\n            return +x || ( x.s ? x.s * 0 : NaN );\n        };\n\n\n        /*\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\n         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.\n         *\n         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.\n         * (Performs 54 loop iterations for n of 9007199254740992.)\n         *\n         * 'pow() exponent not an integer: {n}'\n         * 'pow() exponent out of range: {n}'\n         */\n        P.toPower = P.pow = function (n) {\n            var k, y,\n                i = mathfloor( n < 0 ? -n : +n ),\n                x = this;\n\n            // Pass ±Infinity to Math.pow if exponent is out of range.\n            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&\n              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||\n                parseFloat(n) != n && !( n = NaN ) ) ) {\n                return new BigNumber( Math.pow( +x, n ) );\n            }\n\n            // Truncating each coefficient array to a length of k after each multiplication equates\n            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a\n            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)\n            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;\n            y = new BigNumber(ONE);\n\n            for ( ; ; ) {\n\n                if ( i % 2 ) {\n                    y = y.times(x);\n                    if ( !y.c ) break;\n                    if ( k && y.c.length > k ) y.c.length = k;\n                }\n\n                i = mathfloor( i / 2 );\n                if ( !i ) break;\n\n                x = x.times(x);\n                if ( k && x.c && x.c.length > k ) x.c.length = k;\n            }\n\n            if ( n < 0 ) y = ONE.div(y);\n            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\n         * necessary to represent the integer part of the value in fixed-point notation, then use\n         * exponential notation.\n         *\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * 'toPrecision() precision not an integer: {sd}'\n         * 'toPrecision() precision out of range: {sd}'\n         * 'toPrecision() rounding mode not an integer: {rm}'\n         * 'toPrecision() rounding mode out of range: {rm}'\n         */\n        P.toPrecision = function ( sd, rm ) {\n            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )\n              ? sd | 0 : null, rm, 24 );\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\n         * TO_EXP_NEG, return exponential notation.\n         *\n         * [b] {number} Integer, 2 to 64 inclusive.\n         *\n         * 'toString() base not an integer: {b}'\n         * 'toString() base out of range: {b}'\n         */\n        P.toString = function (b) {\n            var str,\n                n = this,\n                s = n.s,\n                e = n.e;\n\n            // Infinity or NaN?\n            if ( e === null ) {\n\n                if (s) {\n                    str = 'Infinity';\n                    if ( s < 0 ) str = '-' + str;\n                } else {\n                    str = 'NaN';\n                }\n            } else {\n                str = coeffToString( n.c );\n\n                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n                      ? toExponential( str, e )\n                      : toFixedPoint( str, e );\n                } else {\n                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );\n                }\n\n                if ( s < 0 && n.c[0] ) str = '-' + str;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\n         * number.\n         */\n        P.truncated = P.trunc = function () {\n            return round( new BigNumber(this), this.e + 1, 1 );\n        };\n\n\n\n        /*\n         * Return as toString, but do not accept a base argument.\n         */\n        P.valueOf = P.toJSON = function () {\n            return this.toString();\n        };\n\n\n        // Aliases for BigDecimal methods.\n        //P.add = P.plus;         // P.add included above\n        //P.subtract = P.minus;   // P.sub included above\n        //P.multiply = P.times;   // P.mul included above\n        //P.divide = P.div;\n        //P.remainder = P.mod;\n        //P.compareTo = P.cmp;\n        //P.negate = P.neg;\n\n\n        if ( configObj != null ) BigNumber.config(configObj);\n\n        return BigNumber;\n    }\n\n\n    // PRIVATE HELPER FUNCTIONS\n\n\n    function bitFloor(n) {\n        var i = n | 0;\n        return n > 0 || n === i ? i : i - 1;\n    }\n\n\n    // Return a coefficient array as a string of base 10 digits.\n    function coeffToString(a) {\n        var s, z,\n            i = 1,\n            j = a.length,\n            r = a[0] + '';\n\n        for ( ; i < j; ) {\n            s = a[i++] + '';\n            z = LOG_BASE - s.length;\n            for ( ; z--; s = '0' + s );\n            r += s;\n        }\n\n        // Determine trailing zeros.\n        for ( j = r.length; r.charCodeAt(--j) === 48; );\n        return r.slice( 0, j + 1 || 1 );\n    }\n\n\n    // Compare the value of BigNumbers x and y.\n    function compare( x, y ) {\n        var a, b,\n            xc = x.c,\n            yc = y.c,\n            i = x.s,\n            j = y.s,\n            k = x.e,\n            l = y.e;\n\n        // Either NaN?\n        if ( !i || !j ) return null;\n\n        a = xc && !xc[0];\n        b = yc && !yc[0];\n\n        // Either zero?\n        if ( a || b ) return a ? b ? 0 : -j : i;\n\n        // Signs differ?\n        if ( i != j ) return i;\n\n        a = i < 0;\n        b = k == l;\n\n        // Either Infinity?\n        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;\n\n        // Compare exponents.\n        if ( !b ) return k > l ^ a ? 1 : -1;\n\n        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;\n\n        // Compare digit by digit.\n        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n        // Compare lengths.\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\n    }\n\n\n    /*\n     * Return true if n is a valid number in range, otherwise false.\n     * Use for argument validation when ERRORS is false.\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\n     */\n    function intValidatorNoErrors( n, min, max ) {\n        return ( n = truncate(n) ) >= min && n <= max;\n    }\n\n\n    function isArray(obj) {\n        return Object.prototype.toString.call(obj) == '[object Array]';\n    }\n\n\n    /*\n     * Convert string of baseIn to an array of numbers of baseOut.\n     * Eg. convertBase('255', 10, 16) returns [15, 15].\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\n     */\n    function toBaseOut( str, baseIn, baseOut ) {\n        var j,\n            arr = [0],\n            arrL,\n            i = 0,\n            len = str.length;\n\n        for ( ; i < len; ) {\n            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );\n            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );\n\n            for ( ; j < arr.length; j++ ) {\n\n                if ( arr[j] > baseOut - 1 ) {\n                    if ( arr[j + 1] == null ) arr[j + 1] = 0;\n                    arr[j + 1] += arr[j] / baseOut | 0;\n                    arr[j] %= baseOut;\n                }\n            }\n        }\n\n        return arr.reverse();\n    }\n\n\n    function toExponential( str, e ) {\n        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +\n          ( e < 0 ? 'e' : 'e+' ) + e;\n    }\n\n\n    function toFixedPoint( str, e ) {\n        var len, z;\n\n        // Negative exponent?\n        if ( e < 0 ) {\n\n            // Prepend zeros.\n            for ( z = '0.'; ++e; z += '0' );\n            str = z + str;\n\n        // Positive exponent\n        } else {\n            len = str.length;\n\n            // Append zeros.\n            if ( ++e > len ) {\n                for ( z = '0', e -= len; --e; z += '0' );\n                str += z;\n            } else if ( e < len ) {\n                str = str.slice( 0, e ) + '.' + str.slice(e);\n            }\n        }\n\n        return str;\n    }\n\n\n    function truncate(n) {\n        n = parseFloat(n);\n        return n < 0 ? mathceil(n) : mathfloor(n);\n    }\n\n\n    // EXPORT\n\n\n    BigNumber = another();\n\n    // AMD.\n    if ( typeof define == 'function' && define.amd ) {\n        define( function () { return BigNumber; } );\n\n    // Node and other environments that support module.exports.\n    } else if ( typeof module != 'undefined' && module.exports ) {\n        module.exports = BigNumber;\n        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}\n\n    // Browser.\n    } else {\n        global.BigNumber = BigNumber;\n    }\n})(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}