{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @author Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\n'use strict';\n\nvar utils = require('../utils/utils');\nvar config = require('../utils/config');\nvar Iban = require('./iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber}\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n  return utils.toBigNumber(number);\n};\nvar isPredefinedBlockNumber = function (blockNumber) {\n  return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n  if (blockNumber === undefined) {\n    return config.defaultBlock;\n  }\n  return inputBlockNumberFormatter(blockNumber);\n};\nvar inputBlockNumberFormatter = function (blockNumber) {\n  if (blockNumber === undefined) {\n    return undefined;\n  } else if (isPredefinedBlockNumber(blockNumber)) {\n    return blockNumber;\n  }\n  return utils.toHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options) {\n  options.from = options.from || config.defaultAccount;\n  if (options.from) {\n    options.from = inputAddressFormatter(options.from);\n  }\n  if (options.to) {\n    // it might be contract creation\n    options.to = inputAddressFormatter(options.to);\n  }\n  ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n    return options[key] !== undefined;\n  }).forEach(function (key) {\n    options[key] = utils.fromDecimal(options[key]);\n  });\n  return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options) {\n  options.from = options.from || config.defaultAccount;\n  options.from = inputAddressFormatter(options.from);\n  if (options.to) {\n    // it might be contract creation\n    options.to = inputAddressFormatter(options.to);\n  }\n  ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n    return options[key] !== undefined;\n  }).forEach(function (key) {\n    options[key] = utils.fromDecimal(options[key]);\n  });\n  return options;\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx) {\n  if (tx.blockNumber !== null) tx.blockNumber = utils.toDecimal(tx.blockNumber);\n  if (tx.transactionIndex !== null) tx.transactionIndex = utils.toDecimal(tx.transactionIndex);\n  tx.nonce = utils.toDecimal(tx.nonce);\n  tx.gas = utils.toDecimal(tx.gas);\n  tx.gasPrice = utils.toBigNumber(tx.gasPrice);\n  tx.value = utils.toBigNumber(tx.value);\n  return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt) {\n  if (receipt.blockNumber !== null) receipt.blockNumber = utils.toDecimal(receipt.blockNumber);\n  if (receipt.transactionIndex !== null) receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);\n  receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);\n  receipt.gasUsed = utils.toDecimal(receipt.gasUsed);\n  if (utils.isArray(receipt.logs)) {\n    receipt.logs = receipt.logs.map(function (log) {\n      return outputLogFormatter(log);\n    });\n  }\n  return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function (block) {\n  // transform to number\n  block.gasLimit = utils.toDecimal(block.gasLimit);\n  block.gasUsed = utils.toDecimal(block.gasUsed);\n  block.size = utils.toDecimal(block.size);\n  block.timestamp = utils.toDecimal(block.timestamp);\n  if (block.number !== null) block.number = utils.toDecimal(block.number);\n  block.difficulty = utils.toBigNumber(block.difficulty);\n  block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);\n  if (utils.isArray(block.transactions)) {\n    block.transactions.forEach(function (item) {\n      if (!utils.isString(item)) return outputTransactionFormatter(item);\n    });\n  }\n  return block;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function (log) {\n  if (log.blockNumber) log.blockNumber = utils.toDecimal(log.blockNumber);\n  if (log.transactionIndex) log.transactionIndex = utils.toDecimal(log.transactionIndex);\n  if (log.logIndex) log.logIndex = utils.toDecimal(log.logIndex);\n  return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function (post) {\n  // post.payload = utils.toHex(post.payload);\n  post.ttl = utils.fromDecimal(post.ttl);\n  post.workToProve = utils.fromDecimal(post.workToProve);\n  post.priority = utils.fromDecimal(post.priority);\n\n  // fallback\n  if (!utils.isArray(post.topics)) {\n    post.topics = post.topics ? [post.topics] : [];\n  }\n\n  // format the following options\n  post.topics = post.topics.map(function (topic) {\n    // convert only if not hex\n    return topic.indexOf('0x') === 0 ? topic : utils.fromUtf8(topic);\n  });\n  return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function (post) {\n  post.expiry = utils.toDecimal(post.expiry);\n  post.sent = utils.toDecimal(post.sent);\n  post.ttl = utils.toDecimal(post.ttl);\n  post.workProved = utils.toDecimal(post.workProved);\n  // post.payloadRaw = post.payload;\n  // post.payload = utils.toAscii(post.payload);\n\n  // if (utils.isJson(post.payload)) {\n  //     post.payload = JSON.parse(post.payload);\n  // }\n\n  // format the following options\n  if (!post.topics) {\n    post.topics = [];\n  }\n  post.topics = post.topics.map(function (topic) {\n    return utils.toAscii(topic);\n  });\n  return post;\n};\nvar inputAddressFormatter = function (address) {\n  var iban = new Iban(address);\n  if (iban.isValid() && iban.isDirect()) {\n    return '0x' + iban.address();\n  } else if (utils.isStrictAddress(address)) {\n    return address;\n  } else if (utils.isAddress(address)) {\n    return '0x' + address;\n  }\n  throw new Error('invalid address');\n};\nvar outputSyncingFormatter = function (result) {\n  if (!result) {\n    return result;\n  }\n  result.startingBlock = utils.toDecimal(result.startingBlock);\n  result.currentBlock = utils.toDecimal(result.currentBlock);\n  result.highestBlock = utils.toDecimal(result.highestBlock);\n  if (result.knownStates) {\n    result.knownStates = utils.toDecimal(result.knownStates);\n    result.pulledStates = utils.toDecimal(result.pulledStates);\n  }\n  return result;\n};\nmodule.exports = {\n  inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n  inputBlockNumberFormatter: inputBlockNumberFormatter,\n  inputCallFormatter: inputCallFormatter,\n  inputTransactionFormatter: inputTransactionFormatter,\n  inputAddressFormatter: inputAddressFormatter,\n  inputPostFormatter: inputPostFormatter,\n  outputBigNumberFormatter: outputBigNumberFormatter,\n  outputTransactionFormatter: outputTransactionFormatter,\n  outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n  outputBlockFormatter: outputBlockFormatter,\n  outputLogFormatter: outputLogFormatter,\n  outputPostFormatter: outputPostFormatter,\n  outputSyncingFormatter: outputSyncingFormatter\n};","map":{"version":3,"names":["utils","require","config","Iban","outputBigNumberFormatter","number","toBigNumber","isPredefinedBlockNumber","blockNumber","inputDefaultBlockNumberFormatter","undefined","defaultBlock","inputBlockNumberFormatter","toHex","inputCallFormatter","options","from","defaultAccount","inputAddressFormatter","to","filter","key","forEach","fromDecimal","inputTransactionFormatter","outputTransactionFormatter","tx","toDecimal","transactionIndex","nonce","gas","gasPrice","value","outputTransactionReceiptFormatter","receipt","cumulativeGasUsed","gasUsed","isArray","logs","map","log","outputLogFormatter","outputBlockFormatter","block","gasLimit","size","timestamp","difficulty","totalDifficulty","transactions","item","isString","logIndex","inputPostFormatter","post","ttl","workToProve","priority","topics","topic","indexOf","fromUtf8","outputPostFormatter","expiry","sent","workProved","toAscii","address","iban","isValid","isDirect","isStrictAddress","isAddress","Error","outputSyncingFormatter","result","startingBlock","currentBlock","highestBlock","knownStates","pulledStates","module","exports"],"sources":["E:/Career/University at Buffalo/Semester 2/CSE_Blockchain/Project/playground/research-papers-bid/node_modules/web3/lib/web3/formatters.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @author Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\n'use strict';\n\n\nvar utils = require('../utils/utils');\nvar config = require('../utils/config');\nvar Iban = require('./iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber}\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBigNumber(number);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return config.defaultBlock;\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return utils.toHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options.from = options.from || config.defaultAccount;\n\n    if (options.from) {\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.fromDecimal(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options){\n\n    options.from = options.from || config.defaultAccount;\n    options.from = inputAddressFormatter(options.from);\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.fromDecimal(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.toDecimal(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.toDecimal(tx.transactionIndex);\n    tx.nonce = utils.toDecimal(tx.nonce);\n    tx.gas = utils.toDecimal(tx.gas);\n    tx.gasPrice = utils.toBigNumber(tx.gasPrice);\n    tx.value = utils.toBigNumber(tx.value);\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.toDecimal(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.toDecimal(receipt.gasUsed);\n\n    if(utils.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(function(log){\n            return outputLogFormatter(log);\n        });\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.toDecimal(block.gasLimit);\n    block.gasUsed = utils.toDecimal(block.gasUsed);\n    block.size = utils.toDecimal(block.size);\n    block.timestamp = utils.toDecimal(block.timestamp);\n    if(block.number !== null)\n        block.number = utils.toDecimal(block.number);\n\n    block.difficulty = utils.toBigNumber(block.difficulty);\n    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);\n\n    if (utils.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!utils.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    return block;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n    if(log.blockNumber)\n        log.blockNumber = utils.toDecimal(log.blockNumber);\n    if(log.transactionIndex)\n        log.transactionIndex = utils.toDecimal(log.transactionIndex);\n    if(log.logIndex)\n        log.logIndex = utils.toDecimal(log.logIndex);\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n    post.ttl = utils.fromDecimal(post.ttl);\n    post.workToProve = utils.fromDecimal(post.workToProve);\n    post.priority = utils.fromDecimal(post.priority);\n\n    // fallback\n    if (!utils.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.toDecimal(post.expiry);\n    post.sent = utils.toDecimal(post.sent);\n    post.ttl = utils.toDecimal(post.ttl);\n    post.workProved = utils.toDecimal(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.toAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toAscii(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return '0x' + iban.address();\n    } else if (utils.isStrictAddress(address)) {\n        return address;\n    } else if (utils.isAddress(address)) {\n        return '0x' + address;\n    }\n    throw new Error('invalid address');\n};\n\n\nvar outputSyncingFormatter = function(result) {\n    if (!result) {\n        return result;\n    }\n\n    result.startingBlock = utils.toDecimal(result.startingBlock);\n    result.currentBlock = utils.toDecimal(result.currentBlock);\n    result.highestBlock = utils.toDecimal(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.toDecimal(result.knownStates);\n        result.pulledStates = utils.toDecimal(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}