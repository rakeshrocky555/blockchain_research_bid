{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\n/**\n * Utils\n *\n * @module utils\n */\n\n/**\n * Utility functions\n *\n * @class [utils] utils\n * @constructor\n */\n\nvar BigNumber = require('bignumber.js');\nvar sha3 = require('./sha3.js');\nvar utf8 = require('utf8');\nvar unitMap = {\n  'noether': '0',\n  'wei': '1',\n  'kwei': '1000',\n  'Kwei': '1000',\n  'babbage': '1000',\n  'femtoether': '1000',\n  'mwei': '1000000',\n  'Mwei': '1000000',\n  'lovelace': '1000000',\n  'picoether': '1000000',\n  'gwei': '1000000000',\n  'Gwei': '1000000000',\n  'shannon': '1000000000',\n  'nanoether': '1000000000',\n  'nano': '1000000000',\n  'szabo': '1000000000000',\n  'microether': '1000000000000',\n  'micro': '1000000000000',\n  'finney': '1000000000000000',\n  'milliether': '1000000000000000',\n  'milli': '1000000000000000',\n  'ether': '1000000000000000000',\n  'kether': '1000000000000000000000',\n  'grand': '1000000000000000000000',\n  'mether': '1000000000000000000000000',\n  'gether': '1000000000000000000000000000',\n  'tether': '1000000000000000000000000000000'\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method padLeft\n * @param {String} string to be padded\n * @param {Number} characters that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar padLeft = function (string, chars, sign) {\n  return new Array(chars - string.length + 1).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method padRight\n * @param {String} string to be padded\n * @param {Number} characters that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar padRight = function (string, chars, sign) {\n  return string + new Array(chars - string.length + 1).join(sign ? sign : \"0\");\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method toUtf8\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nvar toUtf8 = function (hex) {\n  // Find termination\n  var str = \"\";\n  var i = 0,\n    l = hex.length;\n  if (hex.substring(0, 2) === '0x') {\n    i = 2;\n  }\n  for (; i < l; i += 2) {\n    var code = parseInt(hex.substr(i, 2), 16);\n    if (code === 0) break;\n    str += String.fromCharCode(code);\n  }\n  return utf8.decode(str);\n};\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method toAscii\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nvar toAscii = function (hex) {\n  // Find termination\n  var str = \"\";\n  var i = 0,\n    l = hex.length;\n  if (hex.substring(0, 2) === '0x') {\n    i = 2;\n  }\n  for (; i < l; i += 2) {\n    var code = parseInt(hex.substr(i, 2), 16);\n    str += String.fromCharCode(code);\n  }\n  return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method fromUtf8\n * @param {String} string\n * @param {Boolean} allowZero to convert code point zero to 00 instead of end of string\n * @returns {String} hex representation of input string\n */\nvar fromUtf8 = function (str, allowZero) {\n  str = utf8.encode(str);\n  var hex = \"\";\n  for (var i = 0; i < str.length; i++) {\n    var code = str.charCodeAt(i);\n    if (code === 0) {\n      if (allowZero) {\n        hex += '00';\n      } else {\n        break;\n      }\n    } else {\n      var n = code.toString(16);\n      hex += n.length < 2 ? '0' + n : n;\n    }\n  }\n  return \"0x\" + hex;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method fromAscii\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nvar fromAscii = function (str, num) {\n  var hex = \"\";\n  for (var i = 0; i < str.length; i++) {\n    var code = str.charCodeAt(i);\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n;\n  }\n  return \"0x\" + hex.padEnd(num, '0');\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method transformToFullName\n * @param {Object} json-abi\n * @return {String} full fnction/event name\n */\nvar transformToFullName = function (json) {\n  if (json.name.indexOf('(') !== -1) {\n    return json.name;\n  }\n  var typeName = json.inputs.map(function (i) {\n    return i.type;\n  }).join();\n  return json.name + '(' + typeName + ')';\n};\n\n/**\n * Should be called to get display name of contract function\n *\n * @method extractDisplayName\n * @param {String} name of function/event\n * @returns {String} display name for function/event eg. multiply(uint256) -> multiply\n */\nvar extractDisplayName = function (name) {\n  var stBracket = name.indexOf('(');\n  var endBracket = name.indexOf(')');\n  return stBracket !== -1 && endBracket !== -1 ? name.substr(0, stBracket) : name;\n};\n\n/**\n * Should be called to get type name of contract function\n *\n * @method extractTypeName\n * @param {String} name of function/event\n * @returns {String} type name for function/event eg. multiply(uint256) -> uint256\n */\nvar extractTypeName = function (name) {\n  var stBracket = name.indexOf('(');\n  var endBracket = name.indexOf(')');\n  return stBracket !== -1 && endBracket !== -1 ? name.substr(stBracket + 1, endBracket - stBracket - 1).replace(' ', '') : \"\";\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method toDecimal\n * @param {String|Number|BigNumber}\n * @return {String}\n */\nvar toDecimal = function (value) {\n  return toBigNumber(value).toNumber();\n};\n\n/**\n * Converts value to it's hex representation\n *\n * @method fromDecimal\n * @param {String|Number|BigNumber}\n * @return {String}\n */\nvar fromDecimal = function (value) {\n  var number = toBigNumber(value);\n  var result = number.toString(16);\n  return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BigNumber|Object}\n * @return {String}\n */\nvar toHex = function (val) {\n  /*jshint maxcomplexity: 8 */\n\n  if (isBoolean(val)) return fromDecimal(+val);\n  if (isBigNumber(val)) return fromDecimal(val);\n  if (typeof val === 'object') return fromUtf8(JSON.stringify(val));\n\n  // if its a negative number, pass it through fromDecimal\n  if (isString(val)) {\n    if (val.indexOf('-0x') === 0) return fromDecimal(val);else if (val.indexOf('0x') === 0) return val;else if (!isFinite(val)) return fromUtf8(val, 1);\n  }\n  return fromDecimal(val);\n};\n\n/**\n * Returns value of unit in Wei\n *\n * @method getValueOfUnit\n * @param {String} unit the unit to convert to, default ether\n * @returns {BigNumber} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getValueOfUnit = function (unit) {\n  unit = unit ? unit.toLowerCase() : 'ether';\n  var unitValue = unitMap[unit];\n  if (unitValue === undefined) {\n    throw new Error('This unit doesn\\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));\n  }\n  return new BigNumber(unitValue, 10);\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number\n*/\nvar fromWei = function (number, unit) {\n  var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));\n  return isBigNumber(number) ? returnValue : returnValue.toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number\n*/\nvar toWei = function (number, unit) {\n  var returnValue = toBigNumber(number).times(getValueOfUnit(unit));\n  return isBigNumber(number) ? returnValue : returnValue.toString(10);\n};\n\n/**\n * Takes an input and transforms it into an bignumber\n *\n * @method toBigNumber\n * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber\n * @return {BigNumber} BigNumber\n*/\nvar toBigNumber = function (number) {\n  /*jshint maxcomplexity:5 */\n  number = number || 0;\n  if (isBigNumber(number)) return number;\n  if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {\n    return new BigNumber(number.replace('0x', ''), 16);\n  }\n  return new BigNumber(number.toString(10), 10);\n};\n\n/**\n * Takes and input transforms it into bignumber and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BigNumber}\n * @return {BigNumber}\n */\nvar toTwosComplement = function (number) {\n  var bigNumber = toBigNumber(number).round();\n  if (bigNumber.lessThan(0)) {\n    return new BigNumber(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", 16).plus(bigNumber).plus(1);\n  }\n  return bigNumber;\n};\n\n/**\n * Checks if the given string is strictly an address\n *\n * @method isStrictAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\nvar isStrictAddress = function (address) {\n  return /^0x[0-9a-f]{40}$/i.test(address);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\nvar isAddress = function (address) {\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    // check if it has the basic requirements of an address\n    return false;\n  } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\n    // If it's all small caps or all all caps, return true\n    return true;\n  } else {\n    // Otherwise check each case\n    return isChecksumAddress(address);\n  }\n};\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method isChecksumAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\nvar isChecksumAddress = function (address) {\n  // Check each case\n  address = address.replace('0x', '');\n  var addressHash = sha3(address.toLowerCase());\n  for (var i = 0; i < 40; i++) {\n    // the nth letter should be uppercase if the nth digit of casemap is 1\n    if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Makes a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX adress\n * @return {String}\n*/\nvar toChecksumAddress = function (address) {\n  if (typeof address === 'undefined') return '';\n  address = address.toLowerCase().replace('0x', '');\n  var addressHash = sha3(address);\n  var checksumAddress = '0x';\n  for (var i = 0; i < address.length; i++) {\n    // If ith character is 9 to f then make it uppercase\n    if (parseInt(addressHash[i], 16) > 7) {\n      checksumAddress += address[i].toUpperCase();\n    } else {\n      checksumAddress += address[i];\n    }\n  }\n  return checksumAddress;\n};\n\n/**\n * Transforms given string to valid 20 bytes-length addres with 0x prefix\n *\n * @method toAddress\n * @param {String} address\n * @return {String} formatted address\n */\nvar toAddress = function (address) {\n  if (isStrictAddress(address)) {\n    return address;\n  }\n  if (/^[0-9a-f]{40}$/.test(address)) {\n    return '0x' + address;\n  }\n  return '0x' + padLeft(toHex(address).substr(2), 40);\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object}\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n  return object instanceof BigNumber || object && object.constructor && object.constructor.name === 'BigNumber';\n};\n\n/**\n * Returns true if object is string, otherwise false\n *\n * @method isString\n * @param {Object}\n * @return {Boolean}\n */\nvar isString = function (object) {\n  return typeof object === 'string' || object && object.constructor && object.constructor.name === 'String';\n};\n\n/**\n * Returns true if object is function, otherwise false\n *\n * @method isFunction\n * @param {Object}\n * @return {Boolean}\n */\nvar isFunction = function (object) {\n  return typeof object === 'function';\n};\n\n/**\n * Returns true if object is Objet, otherwise false\n *\n * @method isObject\n * @param {Object}\n * @return {Boolean}\n */\nvar isObject = function (object) {\n  return object !== null && !Array.isArray(object) && typeof object === 'object';\n};\n\n/**\n * Returns true if object is boolean, otherwise false\n *\n * @method isBoolean\n * @param {Object}\n * @return {Boolean}\n */\nvar isBoolean = function (object) {\n  return typeof object === 'boolean';\n};\n\n/**\n * Returns true if object is array, otherwise false\n *\n * @method isArray\n * @param {Object}\n * @return {Boolean}\n */\nvar isArray = function (object) {\n  return Array.isArray(object);\n};\n\n/**\n * Returns true if given string is valid json object\n *\n * @method isJson\n * @param {String}\n * @return {Boolean}\n */\nvar isJson = function (str) {\n  try {\n    return !!JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n  if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n    return false;\n  } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n  if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n    return false;\n  } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n    return true;\n  }\n  return false;\n};\nmodule.exports = {\n  padLeft: padLeft,\n  padRight: padRight,\n  toHex: toHex,\n  toDecimal: toDecimal,\n  fromDecimal: fromDecimal,\n  toUtf8: toUtf8,\n  toAscii: toAscii,\n  fromUtf8: fromUtf8,\n  fromAscii: fromAscii,\n  transformToFullName: transformToFullName,\n  extractDisplayName: extractDisplayName,\n  extractTypeName: extractTypeName,\n  toWei: toWei,\n  fromWei: fromWei,\n  toBigNumber: toBigNumber,\n  toTwosComplement: toTwosComplement,\n  toAddress: toAddress,\n  isBigNumber: isBigNumber,\n  isStrictAddress: isStrictAddress,\n  isAddress: isAddress,\n  isChecksumAddress: isChecksumAddress,\n  toChecksumAddress: toChecksumAddress,\n  isFunction: isFunction,\n  isString: isString,\n  isObject: isObject,\n  isBoolean: isBoolean,\n  isArray: isArray,\n  isJson: isJson,\n  isBloom: isBloom,\n  isTopic: isTopic\n};","map":{"version":3,"names":["BigNumber","require","sha3","utf8","unitMap","padLeft","string","chars","sign","Array","length","join","padRight","toUtf8","hex","str","i","l","substring","code","parseInt","substr","String","fromCharCode","decode","toAscii","fromUtf8","allowZero","encode","charCodeAt","n","toString","fromAscii","num","padEnd","transformToFullName","json","name","indexOf","typeName","inputs","map","type","extractDisplayName","stBracket","endBracket","extractTypeName","replace","toDecimal","value","toBigNumber","toNumber","fromDecimal","number","result","lessThan","toHex","val","isBoolean","isBigNumber","JSON","stringify","isString","isFinite","getValueOfUnit","unit","toLowerCase","unitValue","undefined","Error","fromWei","returnValue","dividedBy","toWei","times","toTwosComplement","bigNumber","round","plus","isStrictAddress","address","test","isAddress","isChecksumAddress","addressHash","toUpperCase","toChecksumAddress","checksumAddress","toAddress","object","constructor","isFunction","isObject","isArray","isJson","parse","e","isBloom","bloom","isTopic","topic","module","exports"],"sources":["E:/Career/University at Buffalo/Semester 2/CSE_Blockchain/Project/playground/research-papers-bid/node_modules/web3/lib/utils/utils.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\n/**\n * Utils\n *\n * @module utils\n */\n\n/**\n * Utility functions\n *\n * @class [utils] utils\n * @constructor\n */\n\n\nvar BigNumber = require('bignumber.js');\nvar sha3 = require('./sha3.js');\nvar utf8 = require('utf8');\n\nvar unitMap = {\n    'noether':      '0',\n    'wei':          '1',\n    'kwei':         '1000',\n    'Kwei':         '1000',\n    'babbage':      '1000',\n    'femtoether':   '1000',\n    'mwei':         '1000000',\n    'Mwei':         '1000000',\n    'lovelace':     '1000000',\n    'picoether':    '1000000',\n    'gwei':         '1000000000',\n    'Gwei':         '1000000000',\n    'shannon':      '1000000000',\n    'nanoether':    '1000000000',\n    'nano':         '1000000000',\n    'szabo':        '1000000000000',\n    'microether':   '1000000000000',\n    'micro':        '1000000000000',\n    'finney':       '1000000000000000',\n    'milliether':   '1000000000000000',\n    'milli':        '1000000000000000',\n    'ether':        '1000000000000000000',\n    'kether':       '1000000000000000000000',\n    'grand':        '1000000000000000000000',\n    'mether':       '1000000000000000000000000',\n    'gether':       '1000000000000000000000000000',\n    'tether':       '1000000000000000000000000000000'\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method padLeft\n * @param {String} string to be padded\n * @param {Number} characters that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar padLeft = function (string, chars, sign) {\n    return new Array(chars - string.length + 1).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method padRight\n * @param {String} string to be padded\n * @param {Number} characters that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar padRight = function (string, chars, sign) {\n    return string + (new Array(chars - string.length + 1).join(sign ? sign : \"0\"));\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method toUtf8\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nvar toUtf8 = function(hex) {\n// Find termination\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        if (code === 0)\n            break;\n        str += String.fromCharCode(code);\n    }\n\n    return utf8.decode(str);\n};\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method toAscii\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nvar toAscii = function(hex) {\n// Find termination\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method fromUtf8\n * @param {String} string\n * @param {Boolean} allowZero to convert code point zero to 00 instead of end of string\n * @returns {String} hex representation of input string\n */\nvar fromUtf8 = function(str, allowZero) {\n    str = utf8.encode(str);\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        if (code === 0) {\n            if (allowZero) {\n                hex += '00';\n            } else {\n                break;\n            }\n        } else {\n            var n = code.toString(16);\n            hex += n.length < 2 ? '0' + n : n;\n        }\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method fromAscii\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nvar fromAscii = function(str, num) {\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex.padEnd(num,'0');\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method transformToFullName\n * @param {Object} json-abi\n * @return {String} full fnction/event name\n */\nvar transformToFullName = function (json) {\n    if (json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join();\n    return json.name + '(' + typeName + ')';\n};\n\n/**\n * Should be called to get display name of contract function\n *\n * @method extractDisplayName\n * @param {String} name of function/event\n * @returns {String} display name for function/event eg. multiply(uint256) -> multiply\n */\nvar extractDisplayName = function (name) {\n    var stBracket = name.indexOf('(');\n    var endBracket = name.indexOf(')');\n    return (stBracket !== -1 && endBracket !== -1) ? name.substr(0, stBracket) : name;\n};\n\n/**\n * Should be called to get type name of contract function\n *\n * @method extractTypeName\n * @param {String} name of function/event\n * @returns {String} type name for function/event eg. multiply(uint256) -> uint256\n */\nvar extractTypeName = function (name) {\n    var stBracket = name.indexOf('(');\n    var endBracket = name.indexOf(')');\n    return (stBracket !== -1 && endBracket !== -1) ? name.substr(stBracket + 1, endBracket - stBracket - 1).replace(' ', '') : \"\";\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method toDecimal\n * @param {String|Number|BigNumber}\n * @return {String}\n */\nvar toDecimal = function (value) {\n    return toBigNumber(value).toNumber();\n};\n\n/**\n * Converts value to it's hex representation\n *\n * @method fromDecimal\n * @param {String|Number|BigNumber}\n * @return {String}\n */\nvar fromDecimal = function (value) {\n    var number = toBigNumber(value);\n    var result = number.toString(16);\n\n    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BigNumber|Object}\n * @return {String}\n */\nvar toHex = function (val) {\n    /*jshint maxcomplexity: 8 */\n\n    if (isBoolean(val))\n        return fromDecimal(+val);\n\n    if (isBigNumber(val))\n        return fromDecimal(val);\n\n    if (typeof val === 'object')\n        return fromUtf8(JSON.stringify(val));\n\n    // if its a negative number, pass it through fromDecimal\n    if (isString(val)) {\n        if (val.indexOf('-0x') === 0)\n            return fromDecimal(val);\n        else if(val.indexOf('0x') === 0)\n            return val;\n        else if (!isFinite(val))\n            return fromUtf8(val,1);\n    }\n\n    return fromDecimal(val);\n};\n\n/**\n * Returns value of unit in Wei\n *\n * @method getValueOfUnit\n * @param {String} unit the unit to convert to, default ether\n * @returns {BigNumber} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getValueOfUnit = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    var unitValue = unitMap[unit];\n    if (unitValue === undefined) {\n        throw new Error('This unit doesn\\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));\n    }\n    return new BigNumber(unitValue, 10);\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number\n*/\nvar fromWei = function(number, unit) {\n    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));\n\n    return isBigNumber(number) ? returnValue : returnValue.toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number\n*/\nvar toWei = function(number, unit) {\n    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));\n\n    return isBigNumber(number) ? returnValue : returnValue.toString(10);\n};\n\n/**\n * Takes an input and transforms it into an bignumber\n *\n * @method toBigNumber\n * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber\n * @return {BigNumber} BigNumber\n*/\nvar toBigNumber = function(number) {\n    /*jshint maxcomplexity:5 */\n    number = number || 0;\n    if (isBigNumber(number))\n        return number;\n\n    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {\n        return new BigNumber(number.replace('0x',''), 16);\n    }\n\n    return new BigNumber(number.toString(10), 10);\n};\n\n/**\n * Takes and input transforms it into bignumber and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BigNumber}\n * @return {BigNumber}\n */\nvar toTwosComplement = function (number) {\n    var bigNumber = toBigNumber(number).round();\n    if (bigNumber.lessThan(0)) {\n        return new BigNumber(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", 16).plus(bigNumber).plus(1);\n    }\n    return bigNumber;\n};\n\n/**\n * Checks if the given string is strictly an address\n *\n * @method isStrictAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\nvar isStrictAddress = function (address) {\n    return /^0x[0-9a-f]{40}$/i.test(address);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\nvar isAddress = function (address) {\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        // check if it has the basic requirements of an address\n        return false;\n    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\n        // If it's all small caps or all all caps, return true\n        return true;\n    } else {\n        // Otherwise check each case\n        return isChecksumAddress(address);\n    }\n};\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method isChecksumAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\nvar isChecksumAddress = function (address) {\n    // Check each case\n    address = address.replace('0x','');\n    var addressHash = sha3(address.toLowerCase());\n\n    for (var i = 0; i < 40; i++ ) {\n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\n\n\n/**\n * Makes a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX adress\n * @return {String}\n*/\nvar toChecksumAddress = function (address) {\n    if (typeof address === 'undefined') return '';\n\n    address = address.toLowerCase().replace('0x','');\n    var addressHash = sha3(address);\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n          checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n/**\n * Transforms given string to valid 20 bytes-length addres with 0x prefix\n *\n * @method toAddress\n * @param {String} address\n * @return {String} formatted address\n */\nvar toAddress = function (address) {\n    if (isStrictAddress(address)) {\n        return address;\n    }\n\n    if (/^[0-9a-f]{40}$/.test(address)) {\n        return '0x' + address;\n    }\n\n    return '0x' + padLeft(toHex(address).substr(2), 40);\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object}\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object instanceof BigNumber ||\n        (object && object.constructor && object.constructor.name === 'BigNumber');\n};\n\n/**\n * Returns true if object is string, otherwise false\n *\n * @method isString\n * @param {Object}\n * @return {Boolean}\n */\nvar isString = function (object) {\n    return typeof object === 'string' ||\n        (object && object.constructor && object.constructor.name === 'String');\n};\n\n/**\n * Returns true if object is function, otherwise false\n *\n * @method isFunction\n * @param {Object}\n * @return {Boolean}\n */\nvar isFunction = function (object) {\n    return typeof object === 'function';\n};\n\n/**\n * Returns true if object is Objet, otherwise false\n *\n * @method isObject\n * @param {Object}\n * @return {Boolean}\n */\nvar isObject = function (object) {\n    return object !== null && !(Array.isArray(object)) && typeof object === 'object';\n};\n\n/**\n * Returns true if object is boolean, otherwise false\n *\n * @method isBoolean\n * @param {Object}\n * @return {Boolean}\n */\nvar isBoolean = function (object) {\n    return typeof object === 'boolean';\n};\n\n/**\n * Returns true if object is array, otherwise false\n *\n * @method isArray\n * @param {Object}\n * @return {Boolean}\n */\nvar isArray = function (object) {\n    return Array.isArray(object);\n};\n\n/**\n * Returns true if given string is valid json object\n *\n * @method isJson\n * @param {String}\n * @return {Boolean}\n */\nvar isJson = function (str) {\n    try {\n        return !!JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n};\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    }\n    return false;\n};\n\nmodule.exports = {\n    padLeft: padLeft,\n    padRight: padRight,\n    toHex: toHex,\n    toDecimal: toDecimal,\n    fromDecimal: fromDecimal,\n    toUtf8: toUtf8,\n    toAscii: toAscii,\n    fromUtf8: fromUtf8,\n    fromAscii: fromAscii,\n    transformToFullName: transformToFullName,\n    extractDisplayName: extractDisplayName,\n    extractTypeName: extractTypeName,\n    toWei: toWei,\n    fromWei: fromWei,\n    toBigNumber: toBigNumber,\n    toTwosComplement: toTwosComplement,\n    toAddress: toAddress,\n    isBigNumber: isBigNumber,\n    isStrictAddress: isStrictAddress,\n    isAddress: isAddress,\n    isChecksumAddress: isChecksumAddress,\n    toChecksumAddress: toChecksumAddress,\n    isFunction: isFunction,\n    isString: isString,\n    isObject: isObject,\n    isBoolean: isBoolean,\n    isArray: isArray,\n    isJson: isJson,\n    isBloom: isBloom,\n    isTopic: isTopic,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}