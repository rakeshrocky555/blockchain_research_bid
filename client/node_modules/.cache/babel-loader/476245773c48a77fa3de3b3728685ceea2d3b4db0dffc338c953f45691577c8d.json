{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file iban.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar BigNumber = require('bignumber.js');\nvar padLeft = function (string, bytes) {\n  var result = string;\n  while (result.length < bytes * 2) {\n    result = '0' + result;\n  }\n  return result;\n};\n\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\nvar iso13616Prepare = function (iban) {\n  var A = 'A'.charCodeAt(0);\n  var Z = 'Z'.charCodeAt(0);\n  iban = iban.toUpperCase();\n  iban = iban.substr(4) + iban.substr(0, 4);\n  return iban.split('').map(function (n) {\n    var code = n.charCodeAt(0);\n    if (code >= A && code <= Z) {\n      // A = 10, B = 11, ... Z = 35\n      return code - A + 10;\n    } else {\n      return n;\n    }\n  }).join('');\n};\n\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\nvar mod9710 = function (iban) {\n  var remainder = iban,\n    block;\n  while (remainder.length > 2) {\n    block = remainder.slice(0, 9);\n    remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n  }\n  return parseInt(remainder, 10) % 97;\n};\n\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\nvar Iban = function (iban) {\n  this._iban = iban;\n};\n\n/**\n * This method should be used to create iban object from ethereum address\n *\n * @method fromAddress\n * @param {String} address\n * @return {Iban} the IBAN object\n */\nIban.fromAddress = function (address) {\n  var asBn = new BigNumber(address, 16);\n  var base36 = asBn.toString(36);\n  var padded = padLeft(base36, 15);\n  return Iban.fromBban(padded.toUpperCase());\n};\n\n/**\n * Convert the passed BBAN to an IBAN for this country specification.\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n *\n * @method fromBban\n * @param {String} bban the BBAN to convert to IBAN\n * @returns {Iban} the IBAN object\n */\nIban.fromBban = function (bban) {\n  var countryCode = 'XE';\n  var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n  var checkDigit = ('0' + (98 - remainder)).slice(-2);\n  return new Iban(countryCode + checkDigit + bban);\n};\n\n/**\n * Should be used to create IBAN object for given institution and identifier\n *\n * @method createIndirect\n * @param {Object} options, required options are \"institution\" and \"identifier\"\n * @return {Iban} the IBAN object\n */\nIban.createIndirect = function (options) {\n  return Iban.fromBban('ETH' + options.institution + options.identifier);\n};\n\n/**\n * Thos method should be used to check if given string is valid iban object\n *\n * @method isValid\n * @param {String} iban string\n * @return {Boolean} true if it is valid IBAN\n */\nIban.isValid = function (iban) {\n  var i = new Iban(iban);\n  return i.isValid();\n};\n\n/**\n * Should be called to check if iban is correct\n *\n * @method isValid\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isValid = function () {\n  return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && mod9710(iso13616Prepare(this._iban)) === 1;\n};\n\n/**\n * Should be called to check if iban number is direct\n *\n * @method isDirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isDirect = function () {\n  return this._iban.length === 34 || this._iban.length === 35;\n};\n\n/**\n * Should be called to check if iban number if indirect\n *\n * @method isIndirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isIndirect = function () {\n  return this._iban.length === 20;\n};\n\n/**\n * Should be called to get iban checksum\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n *\n * @method checksum\n * @returns {String} checksum\n */\nIban.prototype.checksum = function () {\n  return this._iban.substr(2, 2);\n};\n\n/**\n * Should be called to get institution identifier\n * eg. XREG\n *\n * @method institution\n * @returns {String} institution identifier\n */\nIban.prototype.institution = function () {\n  return this.isIndirect() ? this._iban.substr(7, 4) : '';\n};\n\n/**\n * Should be called to get client identifier within institution\n * eg. GAVOFYORK\n *\n * @method client\n * @returns {String} client identifier\n */\nIban.prototype.client = function () {\n  return this.isIndirect() ? this._iban.substr(11) : '';\n};\n\n/**\n * Should be called to get client direct address\n *\n * @method address\n * @returns {String} client direct address\n */\nIban.prototype.address = function () {\n  if (this.isDirect()) {\n    var base36 = this._iban.substr(4);\n    var asBn = new BigNumber(base36, 36);\n    return padLeft(asBn.toString(16), 20);\n  }\n  return '';\n};\nIban.prototype.toString = function () {\n  return this._iban;\n};\nmodule.exports = Iban;","map":{"version":3,"names":["BigNumber","require","padLeft","string","bytes","result","length","iso13616Prepare","iban","A","charCodeAt","Z","toUpperCase","substr","split","map","n","code","join","mod9710","remainder","block","slice","parseInt","Iban","_iban","fromAddress","address","asBn","base36","toString","padded","fromBban","bban","countryCode","checkDigit","createIndirect","options","institution","identifier","isValid","i","prototype","test","isDirect","isIndirect","checksum","client","module","exports"],"sources":["E:/Career/University at Buffalo/Semester 2/CSE_Blockchain/Project/playground/research-papers-bid/node_modules/web3/lib/web3/iban.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file iban.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar BigNumber = require('bignumber.js');\n\nvar padLeft = function (string, bytes) {\n    var result = string;\n    while (result.length < bytes * 2) {\n        result = '0' + result;\n    }\n    return result;\n};\n\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\nvar iso13616Prepare = function (iban) {\n    var A = 'A'.charCodeAt(0);\n    var Z = 'Z'.charCodeAt(0);\n\n    iban = iban.toUpperCase();\n    iban = iban.substr(4) + iban.substr(0,4);\n\n    return iban.split('').map(function(n){\n        var code = n.charCodeAt(0);\n        if (code >= A && code <= Z){\n            // A = 10, B = 11, ... Z = 35\n            return code - A + 10;\n        } else {\n            return n;\n        }\n    }).join('');\n};\n\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\nvar mod9710 = function (iban) {\n    var remainder = iban,\n        block;\n\n    while (remainder.length > 2){\n        block = remainder.slice(0, 9);\n        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n    }\n\n    return parseInt(remainder, 10) % 97;\n};\n\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\nvar Iban = function (iban) {\n    this._iban = iban;\n};\n\n/**\n * This method should be used to create iban object from ethereum address\n *\n * @method fromAddress\n * @param {String} address\n * @return {Iban} the IBAN object\n */\nIban.fromAddress = function (address) {\n    var asBn = new BigNumber(address, 16);\n    var base36 = asBn.toString(36);\n    var padded = padLeft(base36, 15);\n    return Iban.fromBban(padded.toUpperCase());\n};\n\n/**\n * Convert the passed BBAN to an IBAN for this country specification.\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n *\n * @method fromBban\n * @param {String} bban the BBAN to convert to IBAN\n * @returns {Iban} the IBAN object\n */\nIban.fromBban = function (bban) {\n    var countryCode = 'XE';\n\n    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n    var checkDigit = ('0' + (98 - remainder)).slice(-2);\n\n    return new Iban(countryCode + checkDigit + bban);\n};\n\n/**\n * Should be used to create IBAN object for given institution and identifier\n *\n * @method createIndirect\n * @param {Object} options, required options are \"institution\" and \"identifier\"\n * @return {Iban} the IBAN object\n */\nIban.createIndirect = function (options) {\n    return Iban.fromBban('ETH' + options.institution + options.identifier);\n};\n\n/**\n * Thos method should be used to check if given string is valid iban object\n *\n * @method isValid\n * @param {String} iban string\n * @return {Boolean} true if it is valid IBAN\n */\nIban.isValid = function (iban) {\n    var i = new Iban(iban);\n    return i.isValid();\n};\n\n/**\n * Should be called to check if iban is correct\n *\n * @method isValid\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isValid = function () {\n    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&\n        mod9710(iso13616Prepare(this._iban)) === 1;\n};\n\n/**\n * Should be called to check if iban number is direct\n *\n * @method isDirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isDirect = function () {\n    return this._iban.length === 34 || this._iban.length === 35;\n};\n\n/**\n * Should be called to check if iban number if indirect\n *\n * @method isIndirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isIndirect = function () {\n    return this._iban.length === 20;\n};\n\n/**\n * Should be called to get iban checksum\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n *\n * @method checksum\n * @returns {String} checksum\n */\nIban.prototype.checksum = function () {\n    return this._iban.substr(2, 2);\n};\n\n/**\n * Should be called to get institution identifier\n * eg. XREG\n *\n * @method institution\n * @returns {String} institution identifier\n */\nIban.prototype.institution = function () {\n    return this.isIndirect() ? this._iban.substr(7, 4) : '';\n};\n\n/**\n * Should be called to get client identifier within institution\n * eg. GAVOFYORK\n *\n * @method client\n * @returns {String} client identifier\n */\nIban.prototype.client = function () {\n    return this.isIndirect() ? this._iban.substr(11) : '';\n};\n\n/**\n * Should be called to get client direct address\n *\n * @method address\n * @returns {String} client direct address\n */\nIban.prototype.address = function () {\n    if (this.isDirect()) {\n        var base36 = this._iban.substr(4);\n        var asBn = new BigNumber(base36, 36);\n        return padLeft(asBn.toString(16), 20);\n    } \n\n    return '';\n};\n\nIban.prototype.toString = function () {\n    return this._iban;\n};\n\nmodule.exports = Iban;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}