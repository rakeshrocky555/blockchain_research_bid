{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file requestmanager.js\n * @author Jeffrey Wilcke <jeff@ethdev.com>\n * @author Marek Kotewicz <marek@ethdev.com>\n * @author Marian Oancea <marian@ethdev.com>\n * @author Fabian Vogelsteller <fabian@ethdev.com>\n * @author Gav Wood <g@ethdev.com>\n * @date 2014\n */\n\nvar Jsonrpc = require('./jsonrpc');\nvar utils = require('../utils/utils');\nvar c = require('../utils/config');\nvar errors = require('./errors');\n\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n */\nvar RequestManager = function (provider) {\n  this.provider = provider;\n  this.polls = {};\n  this.timeout = null;\n};\n\n/**\n * Should be used to synchronously send request\n *\n * @method send\n * @param {Object} data\n * @return {Object}\n */\nRequestManager.prototype.send = function (data) {\n  if (!this.provider) {\n    console.error(errors.InvalidProvider());\n    return null;\n  }\n  var payload = Jsonrpc.toPayload(data.method, data.params);\n  var result = this.provider.send(payload);\n  if (!Jsonrpc.isValidResponse(result)) {\n    throw errors.InvalidResponse(result);\n  }\n  return result.result;\n};\n\n/**\n * Should be used to asynchronously send request\n *\n * @method sendAsync\n * @param {Object} data\n * @param {Function} callback\n */\nRequestManager.prototype.sendAsync = function (data, callback) {\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n  var payload = Jsonrpc.toPayload(data.method, data.params);\n  this.provider.sendAsync(payload, function (err, result) {\n    if (err) {\n      return callback(err);\n    }\n    if (!Jsonrpc.isValidResponse(result)) {\n      return callback(errors.InvalidResponse(result));\n    }\n    callback(null, result.result);\n  });\n};\n\n/**\n * Should be called to asynchronously send batch request\n *\n * @method sendBatch\n * @param {Array} batch data\n * @param {Function} callback\n */\nRequestManager.prototype.sendBatch = function (data, callback) {\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n  var payload = Jsonrpc.toBatchPayload(data);\n  this.provider.sendAsync(payload, function (err, results) {\n    if (err) {\n      return callback(err);\n    }\n    if (!utils.isArray(results)) {\n      return callback(errors.InvalidResponse(results));\n    }\n    callback(err, results);\n  });\n};\n\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n * @param {Object}\n */\nRequestManager.prototype.setProvider = function (p) {\n  this.provider = p;\n};\n\n/**\n * Should be used to start polling\n *\n * @method startPolling\n * @param {Object} data\n * @param {Number} pollId\n * @param {Function} callback\n * @param {Function} uninstall\n *\n * @todo cleanup number of params\n */\nRequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {\n  this.polls[pollId] = {\n    data: data,\n    id: pollId,\n    callback: callback,\n    uninstall: uninstall\n  };\n\n  // start polling\n  if (!this.timeout) {\n    this.poll();\n  }\n};\n\n/**\n * Should be used to stop polling for filter with given id\n *\n * @method stopPolling\n * @param {Number} pollId\n */\nRequestManager.prototype.stopPolling = function (pollId) {\n  delete this.polls[pollId];\n\n  // stop polling\n  if (Object.keys(this.polls).length === 0 && this.timeout) {\n    clearTimeout(this.timeout);\n    this.timeout = null;\n  }\n};\n\n/**\n * Should be called to reset the polling mechanism of the request manager\n *\n * @method reset\n */\nRequestManager.prototype.reset = function (keepIsSyncing) {\n  /*jshint maxcomplexity:5 */\n\n  for (var key in this.polls) {\n    // remove all polls, except sync polls,\n    // they need to be removed manually by calling syncing.stopWatching()\n    if (!keepIsSyncing || key.indexOf('syncPoll_') === -1) {\n      this.polls[key].uninstall();\n      delete this.polls[key];\n    }\n  }\n\n  // stop polling\n  if (Object.keys(this.polls).length === 0 && this.timeout) {\n    clearTimeout(this.timeout);\n    this.timeout = null;\n  }\n};\n\n/**\n * Should be called to poll for changes on filter with given id\n *\n * @method poll\n */\nRequestManager.prototype.poll = function () {\n  /*jshint maxcomplexity: 6 */\n  this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);\n  if (Object.keys(this.polls).length === 0) {\n    return;\n  }\n  if (!this.provider) {\n    console.error(errors.InvalidProvider());\n    return;\n  }\n  var pollsData = [];\n  var pollsIds = [];\n  for (var key in this.polls) {\n    pollsData.push(this.polls[key].data);\n    pollsIds.push(key);\n  }\n  if (pollsData.length === 0) {\n    return;\n  }\n  var payload = Jsonrpc.toBatchPayload(pollsData);\n\n  // map the request id to they poll id\n  var pollsIdMap = {};\n  payload.forEach(function (load, index) {\n    pollsIdMap[load.id] = pollsIds[index];\n  });\n  var self = this;\n  this.provider.sendAsync(payload, function (error, results) {\n    // TODO: console log?\n    if (error) {\n      return;\n    }\n    if (!utils.isArray(results)) {\n      throw errors.InvalidResponse(results);\n    }\n    results.map(function (result) {\n      var id = pollsIdMap[result.id];\n\n      // make sure the filter is still installed after arrival of the request\n      if (self.polls[id]) {\n        result.callback = self.polls[id].callback;\n        return result;\n      } else return false;\n    }).filter(function (result) {\n      return !!result;\n    }).filter(function (result) {\n      var valid = Jsonrpc.isValidResponse(result);\n      if (!valid) {\n        result.callback(errors.InvalidResponse(result));\n      }\n      return valid;\n    }).forEach(function (result) {\n      result.callback(null, result.result);\n    });\n  });\n};\nmodule.exports = RequestManager;","map":{"version":3,"names":["Jsonrpc","require","utils","c","errors","RequestManager","provider","polls","timeout","prototype","send","data","console","error","InvalidProvider","payload","toPayload","method","params","result","isValidResponse","InvalidResponse","sendAsync","callback","err","sendBatch","toBatchPayload","results","isArray","setProvider","p","startPolling","pollId","uninstall","id","poll","stopPolling","Object","keys","length","clearTimeout","reset","keepIsSyncing","key","indexOf","setTimeout","bind","ETH_POLLING_TIMEOUT","pollsData","pollsIds","push","pollsIdMap","forEach","load","index","self","map","filter","valid","module","exports"],"sources":["E:/Career/University at Buffalo/Semester 2/CSE_Blockchain/Project/playground/research-papers-bid/node_modules/web3/lib/web3/requestmanager.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file requestmanager.js\n * @author Jeffrey Wilcke <jeff@ethdev.com>\n * @author Marek Kotewicz <marek@ethdev.com>\n * @author Marian Oancea <marian@ethdev.com>\n * @author Fabian Vogelsteller <fabian@ethdev.com>\n * @author Gav Wood <g@ethdev.com>\n * @date 2014\n */\n\nvar Jsonrpc = require('./jsonrpc');\nvar utils = require('../utils/utils');\nvar c = require('../utils/config');\nvar errors = require('./errors');\n\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n */\nvar RequestManager = function (provider) {\n    this.provider = provider;\n    this.polls = {};\n    this.timeout = null;\n};\n\n/**\n * Should be used to synchronously send request\n *\n * @method send\n * @param {Object} data\n * @return {Object}\n */\nRequestManager.prototype.send = function (data) {\n    if (!this.provider) {\n        console.error(errors.InvalidProvider());\n        return null;\n    }\n\n    var payload = Jsonrpc.toPayload(data.method, data.params);\n    var result = this.provider.send(payload);\n\n    if (!Jsonrpc.isValidResponse(result)) {\n        throw errors.InvalidResponse(result);\n    }\n\n    return result.result;\n};\n\n/**\n * Should be used to asynchronously send request\n *\n * @method sendAsync\n * @param {Object} data\n * @param {Function} callback\n */\nRequestManager.prototype.sendAsync = function (data, callback) {\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    var payload = Jsonrpc.toPayload(data.method, data.params);\n    this.provider.sendAsync(payload, function (err, result) {\n        if (err) {\n            return callback(err);\n        }\n        \n        if (!Jsonrpc.isValidResponse(result)) {\n            return callback(errors.InvalidResponse(result));\n        }\n\n        callback(null, result.result);\n    });\n};\n\n/**\n * Should be called to asynchronously send batch request\n *\n * @method sendBatch\n * @param {Array} batch data\n * @param {Function} callback\n */\nRequestManager.prototype.sendBatch = function (data, callback) {\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    var payload = Jsonrpc.toBatchPayload(data);\n\n    this.provider.sendAsync(payload, function (err, results) {\n        if (err) {\n            return callback(err);\n        }\n\n        if (!utils.isArray(results)) {\n            return callback(errors.InvalidResponse(results));\n        }\n\n        callback(err, results);\n    }); \n};\n\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n * @param {Object}\n */\nRequestManager.prototype.setProvider = function (p) {\n    this.provider = p;\n};\n\n/**\n * Should be used to start polling\n *\n * @method startPolling\n * @param {Object} data\n * @param {Number} pollId\n * @param {Function} callback\n * @param {Function} uninstall\n *\n * @todo cleanup number of params\n */\nRequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {\n    this.polls[pollId] = {data: data, id: pollId, callback: callback, uninstall: uninstall};\n\n\n    // start polling\n    if (!this.timeout) {\n        this.poll();\n    }\n};\n\n/**\n * Should be used to stop polling for filter with given id\n *\n * @method stopPolling\n * @param {Number} pollId\n */\nRequestManager.prototype.stopPolling = function (pollId) {\n    delete this.polls[pollId];\n\n    // stop polling\n    if(Object.keys(this.polls).length === 0 && this.timeout) {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n    }\n};\n\n/**\n * Should be called to reset the polling mechanism of the request manager\n *\n * @method reset\n */\nRequestManager.prototype.reset = function (keepIsSyncing) {\n    /*jshint maxcomplexity:5 */\n\n    for (var key in this.polls) {\n        // remove all polls, except sync polls,\n        // they need to be removed manually by calling syncing.stopWatching()\n        if(!keepIsSyncing || key.indexOf('syncPoll_') === -1) {\n            this.polls[key].uninstall();\n            delete this.polls[key];\n        }\n    }\n\n    // stop polling\n    if(Object.keys(this.polls).length === 0 && this.timeout) {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n    }\n};\n\n/**\n * Should be called to poll for changes on filter with given id\n *\n * @method poll\n */\nRequestManager.prototype.poll = function () {\n    /*jshint maxcomplexity: 6 */\n    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);\n\n    if (Object.keys(this.polls).length === 0) {\n        return;\n    }\n\n    if (!this.provider) {\n        console.error(errors.InvalidProvider());\n        return;\n    }\n\n    var pollsData = [];\n    var pollsIds = [];\n    for (var key in this.polls) {\n        pollsData.push(this.polls[key].data);\n        pollsIds.push(key);\n    }\n\n    if (pollsData.length === 0) {\n        return;\n    }\n\n    var payload = Jsonrpc.toBatchPayload(pollsData);\n    \n    // map the request id to they poll id\n    var pollsIdMap = {};\n    payload.forEach(function(load, index){\n        pollsIdMap[load.id] = pollsIds[index];\n    });\n\n\n    var self = this;\n    this.provider.sendAsync(payload, function (error, results) {\n\n\n        // TODO: console log?\n        if (error) {\n            return;\n        }\n\n        if (!utils.isArray(results)) {\n            throw errors.InvalidResponse(results);\n        }\n        results.map(function (result) {\n            var id = pollsIdMap[result.id];\n\n            // make sure the filter is still installed after arrival of the request\n            if (self.polls[id]) {\n                result.callback = self.polls[id].callback;\n                return result;\n            } else\n                return false;\n        }).filter(function (result) {\n            return !!result; \n        }).filter(function (result) {\n            var valid = Jsonrpc.isValidResponse(result);\n            if (!valid) {\n                result.callback(errors.InvalidResponse(result));\n            }\n            return valid;\n        }).forEach(function (result) {\n            result.callback(null, result.result);\n        });\n    });\n};\n\nmodule.exports = RequestManager;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}