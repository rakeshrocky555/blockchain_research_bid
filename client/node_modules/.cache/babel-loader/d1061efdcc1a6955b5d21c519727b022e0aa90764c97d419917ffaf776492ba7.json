{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file param.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar utils = require('../utils/utils');\n\n/**\n * SolidityParam object prototype.\n * Should be used when encoding, decoding solidity bytes\n */\nvar SolidityParam = function (value, offset) {\n  this.value = value || '';\n  this.offset = offset; // offset in bytes\n};\n\n/**\n * This method should be used to get length of params's dynamic part\n * \n * @method dynamicPartLength\n * @returns {Number} length of dynamic part (in bytes)\n */\nSolidityParam.prototype.dynamicPartLength = function () {\n  return this.dynamicPart().length / 2;\n};\n\n/**\n * This method should be used to create copy of solidity param with different offset\n *\n * @method withOffset\n * @param {Number} offset length in bytes\n * @returns {SolidityParam} new solidity param with applied offset\n */\nSolidityParam.prototype.withOffset = function (offset) {\n  return new SolidityParam(this.value, offset);\n};\n\n/**\n * This method should be used to combine solidity params together\n * eg. when appending an array\n *\n * @method combine\n * @param {SolidityParam} param with which we should combine\n * @param {SolidityParam} result of combination\n */\nSolidityParam.prototype.combine = function (param) {\n  return new SolidityParam(this.value + param.value);\n};\n\n/**\n * This method should be called to check if param has dynamic size.\n * If it has, it returns true, otherwise false\n *\n * @method isDynamic\n * @returns {Boolean}\n */\nSolidityParam.prototype.isDynamic = function () {\n  return this.offset !== undefined;\n};\n\n/**\n * This method should be called to transform offset to bytes\n *\n * @method offsetAsBytes\n * @returns {String} bytes representation of offset\n */\nSolidityParam.prototype.offsetAsBytes = function () {\n  return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);\n};\n\n/**\n * This method should be called to get static part of param\n *\n * @method staticPart\n * @returns {String} offset if it is a dynamic param, otherwise value\n */\nSolidityParam.prototype.staticPart = function () {\n  if (!this.isDynamic()) {\n    return this.value;\n  }\n  return this.offsetAsBytes();\n};\n\n/**\n * This method should be called to get dynamic part of param\n *\n * @method dynamicPart\n * @returns {String} returns a value if it is a dynamic param, otherwise empty string\n */\nSolidityParam.prototype.dynamicPart = function () {\n  return this.isDynamic() ? this.value : '';\n};\n\n/**\n * This method should be called to encode param\n *\n * @method encode\n * @returns {String}\n */\nSolidityParam.prototype.encode = function () {\n  return this.staticPart() + this.dynamicPart();\n};\n\n/**\n * This method should be called to encode array of params\n *\n * @method encodeList\n * @param {Array[SolidityParam]} params\n * @returns {String}\n */\nSolidityParam.encodeList = function (params) {\n  // updating offsets\n  var totalOffset = params.length * 32;\n  var offsetParams = params.map(function (param) {\n    if (!param.isDynamic()) {\n      return param;\n    }\n    var offset = totalOffset;\n    totalOffset += param.dynamicPartLength();\n    return param.withOffset(offset);\n  });\n\n  // encode everything!\n  return offsetParams.reduce(function (result, param) {\n    return result + param.dynamicPart();\n  }, offsetParams.reduce(function (result, param) {\n    return result + param.staticPart();\n  }, ''));\n};\nmodule.exports = SolidityParam;","map":{"version":3,"names":["utils","require","SolidityParam","value","offset","prototype","dynamicPartLength","dynamicPart","length","withOffset","combine","param","isDynamic","undefined","offsetAsBytes","padLeft","toTwosComplement","toString","staticPart","encode","encodeList","params","totalOffset","offsetParams","map","reduce","result","module","exports"],"sources":["E:/Career/University at Buffalo/Semester 2/CSE_Blockchain/Project/playground/research-papers-bid/node_modules/web3/lib/solidity/param.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file param.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar utils = require('../utils/utils');\n\n/**\n * SolidityParam object prototype.\n * Should be used when encoding, decoding solidity bytes\n */\nvar SolidityParam = function (value, offset) {\n    this.value = value || '';\n    this.offset = offset; // offset in bytes\n};\n\n/**\n * This method should be used to get length of params's dynamic part\n * \n * @method dynamicPartLength\n * @returns {Number} length of dynamic part (in bytes)\n */\nSolidityParam.prototype.dynamicPartLength = function () {\n    return this.dynamicPart().length / 2;\n};\n\n/**\n * This method should be used to create copy of solidity param with different offset\n *\n * @method withOffset\n * @param {Number} offset length in bytes\n * @returns {SolidityParam} new solidity param with applied offset\n */\nSolidityParam.prototype.withOffset = function (offset) {\n    return new SolidityParam(this.value, offset);\n};\n\n/**\n * This method should be used to combine solidity params together\n * eg. when appending an array\n *\n * @method combine\n * @param {SolidityParam} param with which we should combine\n * @param {SolidityParam} result of combination\n */\nSolidityParam.prototype.combine = function (param) {\n    return new SolidityParam(this.value + param.value); \n};\n\n/**\n * This method should be called to check if param has dynamic size.\n * If it has, it returns true, otherwise false\n *\n * @method isDynamic\n * @returns {Boolean}\n */\nSolidityParam.prototype.isDynamic = function () {\n    return this.offset !== undefined;\n};\n\n/**\n * This method should be called to transform offset to bytes\n *\n * @method offsetAsBytes\n * @returns {String} bytes representation of offset\n */\nSolidityParam.prototype.offsetAsBytes = function () {\n    return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);\n};\n\n/**\n * This method should be called to get static part of param\n *\n * @method staticPart\n * @returns {String} offset if it is a dynamic param, otherwise value\n */\nSolidityParam.prototype.staticPart = function () {\n    if (!this.isDynamic()) {\n        return this.value; \n    } \n    return this.offsetAsBytes();\n};\n\n/**\n * This method should be called to get dynamic part of param\n *\n * @method dynamicPart\n * @returns {String} returns a value if it is a dynamic param, otherwise empty string\n */\nSolidityParam.prototype.dynamicPart = function () {\n    return this.isDynamic() ? this.value : '';\n};\n\n/**\n * This method should be called to encode param\n *\n * @method encode\n * @returns {String}\n */\nSolidityParam.prototype.encode = function () {\n    return this.staticPart() + this.dynamicPart();\n};\n\n/**\n * This method should be called to encode array of params\n *\n * @method encodeList\n * @param {Array[SolidityParam]} params\n * @returns {String}\n */\nSolidityParam.encodeList = function (params) {\n    \n    // updating offsets\n    var totalOffset = params.length * 32;\n    var offsetParams = params.map(function (param) {\n        if (!param.isDynamic()) {\n            return param;\n        }\n        var offset = totalOffset;\n        totalOffset += param.dynamicPartLength();\n        return param.withOffset(offset);\n    });\n\n    // encode everything!\n    return offsetParams.reduce(function (result, param) {\n        return result + param.dynamicPart();\n    }, offsetParams.reduce(function (result, param) {\n        return result + param.staticPart();\n    }, ''));\n};\n\n\n\nmodule.exports = SolidityParam;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}