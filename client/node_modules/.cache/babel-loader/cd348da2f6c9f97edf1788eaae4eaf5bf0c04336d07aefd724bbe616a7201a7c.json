{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file method.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar utils = require('../utils/utils');\nvar errors = require('./errors');\nvar Method = function (options) {\n  this.name = options.name;\n  this.call = options.call;\n  this.params = options.params || 0;\n  this.inputFormatter = options.inputFormatter;\n  this.outputFormatter = options.outputFormatter;\n  this.requestManager = null;\n};\nMethod.prototype.setRequestManager = function (rm) {\n  this.requestManager = rm;\n};\n\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n  return utils.isFunction(this.call) ? this.call(args) : this.call;\n};\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n  if (utils.isFunction(args[args.length - 1])) {\n    return args.pop(); // modify the args array!\n  }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n * \n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n  if (args.length !== this.params) {\n    throw errors.InvalidNumberOfRPCParams();\n  }\n};\n\n/**\n * Should be called to format input args of method\n * \n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n  if (!this.inputFormatter) {\n    return args;\n  }\n  return this.inputFormatter.map(function (formatter, index) {\n    return formatter ? formatter(args[index]) : args[index];\n  });\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n  return this.outputFormatter && result ? this.outputFormatter(result) : result;\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n  var call = this.getCall(args);\n  var callback = this.extractCallback(args);\n  var params = this.formatInput(args);\n  this.validateArgs(params);\n  return {\n    method: call,\n    params: params,\n    callback: callback\n  };\n};\nMethod.prototype.attachToObject = function (obj) {\n  var func = this.buildCall();\n  func.call = this.call; // TODO!!! that's ugly. filter.js uses it\n  var name = this.name.split('.');\n  if (name.length > 1) {\n    obj[name[0]] = obj[name[0]] || {};\n    obj[name[0]][name[1]] = func;\n  } else {\n    obj[name[0]] = func;\n  }\n};\nMethod.prototype.buildCall = function () {\n  var method = this;\n  var send = function () {\n    var payload = method.toPayload(Array.prototype.slice.call(arguments));\n    if (payload.callback) {\n      return method.requestManager.sendAsync(payload, function (err, result) {\n        payload.callback(err, method.formatOutput(result));\n      });\n    }\n    return method.formatOutput(method.requestManager.send(payload));\n  };\n  send.request = this.request.bind(this);\n  return send;\n};\n\n/**\n * Should be called to create pure JSONRPC request which can be used in batch request\n *\n * @method request\n * @param {...} params\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n  var payload = this.toPayload(Array.prototype.slice.call(arguments));\n  payload.format = this.formatOutput.bind(this);\n  return payload;\n};\nmodule.exports = Method;","map":{"version":3,"names":["utils","require","errors","Method","options","name","call","params","inputFormatter","outputFormatter","requestManager","prototype","setRequestManager","rm","getCall","args","isFunction","extractCallback","length","pop","validateArgs","InvalidNumberOfRPCParams","formatInput","map","formatter","index","formatOutput","result","toPayload","callback","method","attachToObject","obj","func","buildCall","split","send","payload","Array","slice","arguments","sendAsync","err","request","bind","format","module","exports"],"sources":["E:/Career/University at Buffalo/Semester 2/CSE_Blockchain/Project/playground/research-papers-bid/node_modules/web3/lib/web3/method.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file method.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar utils = require('../utils/utils');\nvar errors = require('./errors');\n\nvar Method = function (options) {\n    this.name = options.name;\n    this.call = options.call;\n    this.params = options.params || 0;\n    this.inputFormatter = options.inputFormatter;\n    this.outputFormatter = options.outputFormatter;\n    this.requestManager = null;\n};\n\nMethod.prototype.setRequestManager = function (rm) {\n    this.requestManager = rm;\n};\n\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n    return utils.isFunction(this.call) ? this.call(args) : this.call;\n};\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n    if (utils.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n * \n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfRPCParams();\n    }\n};\n\n/**\n * Should be called to format input args of method\n * \n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n    if (!this.inputFormatter) {\n        return args;\n    }\n\n    return this.inputFormatter.map(function (formatter, index) {\n        return formatter ? formatter(args[index]) : args[index];\n    });\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n    return this.outputFormatter && result ? this.outputFormatter(result) : result;\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n    var call = this.getCall(args);\n    var callback = this.extractCallback(args);\n    var params = this.formatInput(args);\n    this.validateArgs(params);\n\n    return {\n        method: call,\n        params: params,\n        callback: callback\n    };\n};\n\nMethod.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call; // TODO!!! that's ugly. filter.js uses it\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    } else {\n        obj[name[0]] = func; \n    }\n};\n\nMethod.prototype.buildCall = function() {\n    var method = this;\n    var send = function () {\n        var payload = method.toPayload(Array.prototype.slice.call(arguments));\n        if (payload.callback) {\n            return method.requestManager.sendAsync(payload, function (err, result) {\n                payload.callback(err, method.formatOutput(result));\n            });\n        }\n        return method.formatOutput(method.requestManager.send(payload));\n    };\n    send.request = this.request.bind(this);\n    return send;\n};\n\n/**\n * Should be called to create pure JSONRPC request which can be used in batch request\n *\n * @method request\n * @param {...} params\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\n\nmodule.exports = Method;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}