{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file coder.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar f = require('./formatters');\nvar SolidityTypeAddress = require('./address');\nvar SolidityTypeBool = require('./bool');\nvar SolidityTypeInt = require('./int');\nvar SolidityTypeUInt = require('./uint');\nvar SolidityTypeDynamicBytes = require('./dynamicbytes');\nvar SolidityTypeString = require('./string');\nvar SolidityTypeReal = require('./real');\nvar SolidityTypeUReal = require('./ureal');\nvar SolidityTypeBytes = require('./bytes');\nvar isDynamic = function (solidityType, type) {\n  return solidityType.isDynamicType(type) || solidityType.isDynamicArray(type);\n};\n\n/**\n * SolidityCoder prototype should be used to encode/decode solidity params of any type\n */\nvar SolidityCoder = function (types) {\n  this._types = types;\n};\n\n/**\n * This method should be used to transform type to SolidityType\n *\n * @method _requireType\n * @param {String} type\n * @returns {SolidityType}\n * @throws {Error} throws if no matching type is found\n */\nSolidityCoder.prototype._requireType = function (type) {\n  var solidityType = this._types.filter(function (t) {\n    return t.isType(type);\n  })[0];\n  if (!solidityType) {\n    throw Error('invalid solidity type!: ' + type);\n  }\n  return solidityType;\n};\n\n/**\n * Should be used to encode plain param\n *\n * @method encodeParam\n * @param {String} type\n * @param {Object} plain param\n * @return {String} encoded plain param\n */\nSolidityCoder.prototype.encodeParam = function (type, param) {\n  return this.encodeParams([type], [param]);\n};\n\n/**\n * Should be used to encode list of params\n *\n * @method encodeParams\n * @param {Array} types\n * @param {Array} params\n * @return {String} encoded list of params\n */\nSolidityCoder.prototype.encodeParams = function (types, params) {\n  var solidityTypes = this.getSolidityTypes(types);\n  var encodeds = solidityTypes.map(function (solidityType, index) {\n    return solidityType.encode(params[index], types[index]);\n  });\n  var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {\n    var staticPartLength = solidityType.staticPartLength(types[index]);\n    var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;\n    return acc + (isDynamic(solidityTypes[index], types[index]) ? 32 : roundedStaticPartLength);\n  }, 0);\n  var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);\n  return result;\n};\nSolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {\n  var result = \"\";\n  var self = this;\n  types.forEach(function (type, i) {\n    if (isDynamic(solidityTypes[i], types[i])) {\n      result += f.formatInputInt(dynamicOffset).encode();\n      var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n      dynamicOffset += e.length / 2;\n    } else {\n      // don't add length to dynamicOffset. it's already counted\n      result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n    }\n\n    // TODO: figure out nested arrays\n  });\n\n  types.forEach(function (type, i) {\n    if (isDynamic(solidityTypes[i], types[i])) {\n      var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n      dynamicOffset += e.length / 2;\n      result += e;\n    }\n  });\n  return result;\n};\nSolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {\n  /* jshint maxcomplexity: 17 */\n  /* jshint maxdepth: 5 */\n\n  var self = this;\n  var encodingMode = {\n    dynamic: 1,\n    static: 2,\n    other: 3\n  };\n  var mode = solidityType.isDynamicArray(type) ? encodingMode.dynamic : solidityType.isStaticArray(type) ? encodingMode.static : encodingMode.other;\n  if (mode !== encodingMode.other) {\n    var nestedName = solidityType.nestedName(type);\n    var nestedStaticPartLength = solidityType.staticPartLength(nestedName);\n    var result = mode === encodingMode.dynamic ? encoded[0] : '';\n    if (solidityType.isDynamicArray(nestedName)) {\n      var previousLength = mode === encodingMode.dynamic ? 2 : 0;\n      for (var i = 0; i < encoded.length; i++) {\n        // calculate length of previous item\n        if (mode === encodingMode.dynamic) {\n          previousLength += +encoded[i - 1][0] || 0;\n        } else if (mode === encodingMode.static) {\n          previousLength += +(encoded[i - 1] || [])[0] || 0;\n        }\n        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n      }\n    }\n    var len = mode === encodingMode.dynamic ? encoded.length - 1 : encoded.length;\n    for (var c = 0; c < len; c++) {\n      var additionalOffset = result / 2;\n      if (mode === encodingMode.dynamic) {\n        result += self.encodeWithOffset(nestedName, solidityType, encoded[c + 1], offset + additionalOffset);\n      } else if (mode === encodingMode.static) {\n        result += self.encodeWithOffset(nestedName, solidityType, encoded[c], offset + additionalOffset);\n      }\n    }\n    return result;\n  }\n  return encoded;\n};\n\n/**\n * Should be used to decode bytes to plain param\n *\n * @method decodeParam\n * @param {String} type\n * @param {String} bytes\n * @return {Object} plain param\n */\nSolidityCoder.prototype.decodeParam = function (type, bytes) {\n  return this.decodeParams([type], bytes)[0];\n};\n\n/**\n * Should be used to decode list of params\n *\n * @method decodeParam\n * @param {Array} types\n * @param {String} bytes\n * @return {Array} array of plain params\n */\nSolidityCoder.prototype.decodeParams = function (types, bytes) {\n  var solidityTypes = this.getSolidityTypes(types);\n  var offsets = this.getOffsets(types, solidityTypes);\n  return solidityTypes.map(function (solidityType, index) {\n    return solidityType.decode(bytes, offsets[index], types[index], index);\n  });\n};\nSolidityCoder.prototype.getOffsets = function (types, solidityTypes) {\n  var lengths = solidityTypes.map(function (solidityType, index) {\n    return solidityType.staticPartLength(types[index]);\n  });\n  for (var i = 1; i < lengths.length; i++) {\n    // sum with length of previous element\n    lengths[i] += lengths[i - 1];\n  }\n  return lengths.map(function (length, index) {\n    // remove the current length, so the length is sum of previous elements\n    var staticPartLength = solidityTypes[index].staticPartLength(types[index]);\n    return length - staticPartLength;\n  });\n};\nSolidityCoder.prototype.getSolidityTypes = function (types) {\n  var self = this;\n  return types.map(function (type) {\n    return self._requireType(type);\n  });\n};\nvar coder = new SolidityCoder([new SolidityTypeAddress(), new SolidityTypeBool(), new SolidityTypeInt(), new SolidityTypeUInt(), new SolidityTypeDynamicBytes(), new SolidityTypeBytes(), new SolidityTypeString(), new SolidityTypeReal(), new SolidityTypeUReal()]);\nmodule.exports = coder;","map":{"version":3,"names":["f","require","SolidityTypeAddress","SolidityTypeBool","SolidityTypeInt","SolidityTypeUInt","SolidityTypeDynamicBytes","SolidityTypeString","SolidityTypeReal","SolidityTypeUReal","SolidityTypeBytes","isDynamic","solidityType","type","isDynamicType","isDynamicArray","SolidityCoder","types","_types","prototype","_requireType","filter","t","isType","Error","encodeParam","param","encodeParams","params","solidityTypes","getSolidityTypes","encodeds","map","index","encode","dynamicOffset","reduce","acc","staticPartLength","roundedStaticPartLength","Math","floor","result","encodeMultiWithOffset","self","forEach","i","formatInputInt","e","encodeWithOffset","length","encoded","offset","encodingMode","dynamic","static","other","mode","isStaticArray","nestedName","nestedStaticPartLength","previousLength","len","c","additionalOffset","decodeParam","bytes","decodeParams","offsets","getOffsets","decode","lengths","coder","module","exports"],"sources":["E:/Career/University at Buffalo/Semester 2/CSE_Blockchain/Project/playground/research-papers-bid/node_modules/web3/lib/solidity/coder.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file coder.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar f = require('./formatters');\n\nvar SolidityTypeAddress = require('./address');\nvar SolidityTypeBool = require('./bool');\nvar SolidityTypeInt = require('./int');\nvar SolidityTypeUInt = require('./uint');\nvar SolidityTypeDynamicBytes = require('./dynamicbytes');\nvar SolidityTypeString = require('./string');\nvar SolidityTypeReal = require('./real');\nvar SolidityTypeUReal = require('./ureal');\nvar SolidityTypeBytes = require('./bytes');\n\nvar isDynamic = function (solidityType, type) {\n   return solidityType.isDynamicType(type) ||\n          solidityType.isDynamicArray(type);\n};\n\n/**\n * SolidityCoder prototype should be used to encode/decode solidity params of any type\n */\nvar SolidityCoder = function (types) {\n    this._types = types;\n};\n\n/**\n * This method should be used to transform type to SolidityType\n *\n * @method _requireType\n * @param {String} type\n * @returns {SolidityType}\n * @throws {Error} throws if no matching type is found\n */\nSolidityCoder.prototype._requireType = function (type) {\n    var solidityType = this._types.filter(function (t) {\n        return t.isType(type);\n    })[0];\n\n    if (!solidityType) {\n        throw Error('invalid solidity type!: ' + type);\n    }\n\n    return solidityType;\n};\n\n/**\n * Should be used to encode plain param\n *\n * @method encodeParam\n * @param {String} type\n * @param {Object} plain param\n * @return {String} encoded plain param\n */\nSolidityCoder.prototype.encodeParam = function (type, param) {\n    return this.encodeParams([type], [param]);\n};\n\n/**\n * Should be used to encode list of params\n *\n * @method encodeParams\n * @param {Array} types\n * @param {Array} params\n * @return {String} encoded list of params\n */\nSolidityCoder.prototype.encodeParams = function (types, params) {\n    var solidityTypes = this.getSolidityTypes(types);\n\n    var encodeds = solidityTypes.map(function (solidityType, index) {\n        return solidityType.encode(params[index], types[index]);\n    });\n\n    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {\n        var staticPartLength = solidityType.staticPartLength(types[index]);\n        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;\n\n        return acc + (isDynamic(solidityTypes[index], types[index]) ?\n            32 :\n            roundedStaticPartLength);\n    }, 0);\n\n    var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);\n\n    return result;\n};\n\nSolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {\n    var result = \"\";\n    var self = this;\n\n    types.forEach(function (type, i) {\n        if (isDynamic(solidityTypes[i], types[i])) {\n            result += f.formatInputInt(dynamicOffset).encode();\n            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n            dynamicOffset += e.length / 2;\n        } else {\n            // don't add length to dynamicOffset. it's already counted\n            result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n        }\n\n        // TODO: figure out nested arrays\n    });\n\n    types.forEach(function (type, i) {\n        if (isDynamic(solidityTypes[i], types[i])) {\n            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n            dynamicOffset += e.length / 2;\n            result += e;\n        }\n    });\n    return result;\n};\n\nSolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {\n    /* jshint maxcomplexity: 17 */\n    /* jshint maxdepth: 5 */\n\n    var self = this;\n    var encodingMode={dynamic:1,static:2,other:3};\n\n    var mode=(solidityType.isDynamicArray(type)?encodingMode.dynamic:(solidityType.isStaticArray(type)?encodingMode.static:encodingMode.other));\n\n    if(mode !== encodingMode.other){\n        var nestedName = solidityType.nestedName(type);\n        var nestedStaticPartLength = solidityType.staticPartLength(nestedName);\n        var result = (mode === encodingMode.dynamic ? encoded[0] : '');\n\n        if (solidityType.isDynamicArray(nestedName)) {\n            var previousLength = (mode === encodingMode.dynamic ? 2 : 0);\n\n            for (var i = 0; i < encoded.length; i++) {\n                // calculate length of previous item\n                if(mode === encodingMode.dynamic){\n                    previousLength += +(encoded[i - 1])[0] || 0;\n                }\n                else if(mode === encodingMode.static){\n                    previousLength += +(encoded[i - 1] || [])[0] || 0;\n                }\n                result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n            }\n        }\n\n        var len= (mode === encodingMode.dynamic ? encoded.length-1 : encoded.length);\n        for (var c = 0; c < len; c++) {\n            var additionalOffset = result / 2;\n            if(mode === encodingMode.dynamic){\n                result += self.encodeWithOffset(nestedName, solidityType, encoded[c + 1], offset +  additionalOffset);\n            }\n            else if(mode === encodingMode.static){\n                result += self.encodeWithOffset(nestedName, solidityType, encoded[c], offset + additionalOffset);\n            }\n        }\n\n        return result;\n    }\n\n    return encoded;\n};\n\n\n/**\n * Should be used to decode bytes to plain param\n *\n * @method decodeParam\n * @param {String} type\n * @param {String} bytes\n * @return {Object} plain param\n */\nSolidityCoder.prototype.decodeParam = function (type, bytes) {\n    return this.decodeParams([type], bytes)[0];\n};\n\n/**\n * Should be used to decode list of params\n *\n * @method decodeParam\n * @param {Array} types\n * @param {String} bytes\n * @return {Array} array of plain params\n */\nSolidityCoder.prototype.decodeParams = function (types, bytes) {\n    var solidityTypes = this.getSolidityTypes(types);\n    var offsets = this.getOffsets(types, solidityTypes);\n\n    return solidityTypes.map(function (solidityType, index) {\n        return solidityType.decode(bytes, offsets[index],  types[index], index);\n    });\n};\n\nSolidityCoder.prototype.getOffsets = function (types, solidityTypes) {\n    var lengths =  solidityTypes.map(function (solidityType, index) {\n        return solidityType.staticPartLength(types[index]);\n    });\n\n    for (var i = 1; i < lengths.length; i++) {\n         // sum with length of previous element\n        lengths[i] += lengths[i - 1];\n    }\n\n    return lengths.map(function (length, index) {\n        // remove the current length, so the length is sum of previous elements\n        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);\n        return length - staticPartLength;\n    });\n};\n\nSolidityCoder.prototype.getSolidityTypes = function (types) {\n    var self = this;\n    return types.map(function (type) {\n        return self._requireType(type);\n    });\n};\n\nvar coder = new SolidityCoder([\n    new SolidityTypeAddress(),\n    new SolidityTypeBool(),\n    new SolidityTypeInt(),\n    new SolidityTypeUInt(),\n    new SolidityTypeDynamicBytes(),\n    new SolidityTypeBytes(),\n    new SolidityTypeString(),\n    new SolidityTypeReal(),\n    new SolidityTypeUReal()\n]);\n\nmodule.exports = coder;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}